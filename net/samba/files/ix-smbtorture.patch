diff --git a/source4/torture/raw/openbench.c b/source4/torture/raw/openbench.c
index 167a62626b4..ac0e6f3f170 100644
--- a/source4/torture/raw/openbench.c
+++ b/source4/torture/raw/openbench.c
@@ -42,7 +42,6 @@
 static int nprocs;
 static int open_failed;
 static int close_failed;
-static char **fnames;
 static int num_connected;
 static struct tevent_timer *report_te;
 
@@ -52,6 +51,7 @@ struct benchopen_state {
 	struct tevent_context *ev;
 	struct smbcli_state *cli;
 	struct smbcli_tree *tree;
+	char **fnames;
 	int client_num;
 	int close_fnum;
 	int open_fnum;
@@ -185,7 +185,7 @@ static void next_open(struct benchopen_state *state)
 	state->open_parms.ntcreatex.in.create_options = 0;
 	state->open_parms.ntcreatex.in.impersonation = 0;
 	state->open_parms.ntcreatex.in.security_flags = 0;
-	state->open_parms.ntcreatex.in.fname = fnames[state->pending_file_num];
+	state->open_parms.ntcreatex.in.fname = state->fnames[state->pending_file_num];
 
 	state->req_open = smb_raw_open_send(state->tree, &state->open_parms);
 	state->req_open->async.fn = open_completed;
@@ -375,7 +375,7 @@ bool torture_bench_open(struct torture_context *torture)
 {
 	bool ret = true;
 	TALLOC_CTX *mem_ctx = talloc_new(torture);
-	int i;
+	int i, j;
 	int timelimit = torture_setting_int(torture, "timelimit", 10);
 	struct timeval tv;
 	struct benchopen_state *state;
@@ -383,6 +383,8 @@ bool torture_bench_open(struct torture_context *torture)
 	int total_retries = 0;
 	int minops = 0;
 	bool progress=false;
+	char *randomdir = NULL;
+	randomdir = talloc_asprintf(mem_ctx, "%s_%s", BASEDIR, generate_random_str(mem_ctx, 8));
 
 	progress = torture_setting_bool(torture, "progress", true);
 	
@@ -425,17 +427,16 @@ bool torture_bench_open(struct torture_context *torture)
 
 	num_connected = i;
 
-	if (!torture_setup_dir(state[0].cli, BASEDIR)) {
+	if (!torture_setup_dir(state[0].cli, randomdir)) {
 		goto failed;
 	}
 
-	fnames = talloc_array(mem_ctx, char *, 3*nprocs);
-	for (i=0;i<3*nprocs;i++) {
-		fnames[i] = talloc_asprintf(fnames, "%s\\file%d.dat", BASEDIR, i);
-	}
-
 	for (i=0;i<nprocs;i++) {
 		/* all connections start with the same file */
+		state[i].fnames = talloc_array(state, char *, 3*nprocs);
+		for (j=0;j<3*nprocs;j++) {
+			state[i].fnames[j] = talloc_asprintf(state[i].fnames, "%s\\file%d_%d.dat", randomdir, i, j);
+		}
 		state[i].next_file_num = 0;
 		state[i].open_fnum = -1;
 		state[i].close_fnum = -1;
@@ -492,7 +493,7 @@ bool torture_bench_open(struct torture_context *torture)
 		smb_raw_exit(state[i].tree->session);
 	}
 
-	smbcli_deltree(state[0].tree, BASEDIR);
+	smbcli_deltree(state[0].tree, randomdir);
 	talloc_free(mem_ctx);
 	return ret;
 
diff --git a/source4/torture/vfs/ixnas.c b/source4/torture/vfs/ixnas.c
new file mode 100644
index 00000000000..4d33203d9f5
--- /dev/null
+++ b/source4/torture/vfs/ixnas.c
@@ -0,0 +1,225 @@
+/*
+   Unix SMB/CIFS implementation.
+
+   Copyright (C) iXsystems 2020
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#include "includes.h"
+#include "lib/cmdline/popt_common.h"
+#include "libcli/smb2/smb2.h"
+#include "libcli/smb2/smb2_calls.h"
+#include "libcli/smb/smbXcli_base.h"
+#include "torture/torture.h"
+#include "torture/vfs/proto.h"
+#include "libcli/resolve/resolve.h"
+#include "torture/util.h"
+#include "torture/smb2/proto.h"
+#include "lib/param/param.h"
+#include "source3/modules/smb_libzfs.h"
+#include <sys/acl.h>
+
+#define BASEDIR "ixnas-timestamp"
+#define IXNASPATH "ixnas_test"
+#define MP "/mnt/tank/ixnas_test"
+
+static const char *null_string = NULL;
+static const char **empty_list = &null_string;
+static const char *default_test = "TESTSNAP*";
+static const char **default_prefix = &default_test;
+
+
+/**
+ * SMB2 connect with explicit share
+ **/
+static NTSTATUS torture_smb2_con_share(struct torture_context *tctx,
+                           const char *share,
+                           struct smb2_tree **tree)
+{
+        struct smbcli_options options;
+        NTSTATUS status;
+        const char *host = torture_setting_string(tctx, "host", NULL);
+
+        lpcfg_smbcli_options(tctx->lp_ctx, &options);
+
+        status = smb2_connect_ext(tctx,
+                                  host,
+                                  lpcfg_smb_ports(tctx->lp_ctx),
+                                  share,
+                                  lpcfg_resolve_context(tctx->lp_ctx),
+                                  popt_get_cmdline_credentials(),
+                                  0,
+                                  tree,
+                                  tctx->ev,
+                                  &options,
+                                  lpcfg_socket_options(tctx->lp_ctx),
+                                  lpcfg_gensec_settings(tctx, tctx->lp_ctx)
+                                  );
+        if (!NT_STATUS_IS_OK(status)) {
+                printf("Failed to connect to SMB2 share \\\\%s\\%s - %s\n",
+                       host, share, nt_errstr(status));
+        }
+        return status;
+}
+
+static bool test_mtime_btime(struct torture_context *tctx,
+			     struct smb2_tree *tree,
+			     const char *fname,
+			     time_t btime,
+			     time_t mtime)
+{
+	char *filename = NULL;
+	char *localname = NULL;
+	struct smb2_create cr;
+	struct smb2_handle handle = {{0}};
+	struct smb2_handle testdirh = {{0}};
+	struct timespec ts_b = { .tv_sec = btime };
+	struct timespec ts_m = { .tv_sec = mtime };
+	uint64_t nttime_b, nttime_m;
+	union smb_setfileinfo si;
+	NTSTATUS status;
+	bool ret = true;
+	smb2_deltree(tree, BASEDIR);
+	struct stat st = {0};
+	int res;
+
+	ZERO_STRUCT(cr);
+	torture_comment(tctx, "Testing [%s]: create: %ld, write: %ld\n",
+			fname, btime, mtime);
+	status = torture_smb2_testdir(tree, BASEDIR, &testdirh);
+	torture_assert_ntstatus_ok_goto(tctx, status, ret, done,
+					"torture_smb2_testdir failed\n");
+
+	filename = talloc_asprintf(tctx, "%s\\%s", BASEDIR, fname);
+	torture_assert_not_null_goto(tctx, filename, ret, done,
+				     "talloc_asprintf failed\n");
+
+	cr = (struct smb2_create) {
+		.in.desired_access = SEC_FLAG_MAXIMUM_ALLOWED,
+		.in.file_attributes = FILE_ATTRIBUTE_NORMAL,
+		.in.share_access = NTCREATEX_SHARE_ACCESS_MASK,
+		.in.create_disposition = NTCREATEX_DISP_OPEN_IF,
+		.in.impersonation_level = NTCREATEX_IMPERSONATION_ANONYMOUS,
+		.in.fname = filename,
+	};
+	TALLOC_FREE(filename);
+
+	status = smb2_create(tree, tctx, &cr);
+	torture_assert_ntstatus_ok_goto(tctx, status, ret, done,
+					"smb2_create failed\n");
+	handle = cr.out.file.handle;
+
+	si = (union smb_setfileinfo) {
+		.basic_info.level = RAW_SFILEINFO_BASIC_INFORMATION,
+		.basic_info.in.file.handle = handle,
+	};
+
+	nttime_b = full_timespec_to_nt_time(&ts_b);
+	nttime_m = full_timespec_to_nt_time(&ts_m);
+	si.basic_info.in.create_time = nttime_b;
+	if (mtime != 0) {
+		si.basic_info.in.write_time = nttime_m;
+	}
+
+	status = smb2_setinfo_file(tree, &si);
+	torture_assert_ntstatus_ok_goto(tctx, status, ret, done,
+					"smb2_setinfo_file failed\n");
+
+	localname = talloc_asprintf(tctx, "%s/%s/%s", MP, BASEDIR, fname);
+        status = smb2_util_close(tree, handle);
+        torture_assert_ntstatus_ok_goto(tctx, status, ret, done,
+                                        "smb2_util_close failed\n");
+	res = stat(localname, &st);
+	if (res != 0) {
+		torture_comment(tctx, "Stat [%s] failed: %s\n",
+				localname, strerror(errno));
+		ret = false;
+		goto done;
+	}
+	TALLOC_FREE(localname);
+
+	if (btime > mtime || btime == 0) {
+		/* These are known failure conditions. Time should not be changed */
+		torture_assert_u64_equal_goto(tctx,
+					      st.st_birthtim.tv_sec,
+					      st.st_mtim.tv_sec,
+					      ret, done,
+					      "Wrong write time\n");
+		ret = true;
+		goto done;
+	}
+
+	torture_assert_u64_equal_goto(tctx,
+				      full_timespec_to_nt_time(&ts_b),
+				      full_timespec_to_nt_time(&st.st_birthtimespec),
+				      ret, done,
+				      "Wrong create time\n");
+
+	torture_assert_u64_equal_goto(tctx,
+				      full_timespec_to_nt_time(&ts_m),
+				      full_timespec_to_nt_time(&st.st_mtimespec),
+				      ret, done,
+				      "Wrong write time\n");
+
+	ZERO_STRUCT(handle);
+
+done:
+	if (!smb2_util_handle_empty(handle)) {
+		smb2_util_close(tree, handle);
+	}
+	if (!smb2_util_handle_empty(testdirh)) {
+		smb2_util_close(tree, testdirh);
+	}
+	smb2_deltree(tree, BASEDIR);
+	return ret;
+
+}
+
+static bool test_ntimes(struct torture_context *tctx,
+			struct smb2_tree *tree_unused)
+{
+	struct smb2_tree *tree_base = NULL;
+	NTSTATUS status;
+	bool ret = true;
+	status = torture_smb2_con_share(tctx, IXNASPATH, &tree_base);
+	torture_assert_ntstatus_ok(tctx, status,
+				   "Failed to connect to [ixnas_test] share");
+
+	if (!test_mtime_btime(tctx, tree_base, "robocopy.txt", 0, 315619200)) {
+		ret = false;
+	}
+	if (!test_mtime_btime(tctx, tree_base, "mtime_newer_than_btime.txt", 100000000000, 315619200)) {
+		ret = false;
+	}
+	if (!test_mtime_btime(tctx, tree_base, "1980_to_future.txt", 315619200, 100000000000)) {
+		ret = false;
+	}
+	if (!test_mtime_btime(tctx, tree_base, "before_1968.txt", -63158400, 315619200)) {
+		ret = false;
+	}
+
+	return ret;
+}
+
+struct torture_suite *torture_ixnas(TALLOC_CTX *ctx)
+{
+	struct torture_suite *suite = torture_suite_create(ctx, "ixnas");
+
+	torture_suite_add_1smb2_test(suite, "ntimes", test_ntimes);
+
+	suite->description = talloc_strdup(suite, "ixnas tests");
+
+	return suite;
+}
diff --git a/source4/torture/vfs/shadow_copy_zfs.c b/source4/torture/vfs/shadow_copy_zfs.c
new file mode 100644
index 00000000000..2eedb499528
--- /dev/null
+++ b/source4/torture/vfs/shadow_copy_zfs.c
@@ -0,0 +1,302 @@
+/*
+   Unix SMB/CIFS implementation.
+
+   Copyright (C) iXsystems 2020
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#include "includes.h"
+#include "lib/cmdline/popt_common.h"
+#include "libcli/smb2/smb2.h"
+#include "libcli/smb2/smb2_calls.h"
+#include "libcli/smb/smbXcli_base.h"
+#include "torture/torture.h"
+#include "torture/vfs/proto.h"
+#include "libcli/resolve/resolve.h"
+#include "torture/util.h"
+#include "torture/smb2/proto.h"
+#include "lib/param/param.h"
+#include "source3/modules/smb_libzfs.h"
+#include <sys/acl.h>
+
+#define BASEDIR "smb2-testsd"
+#define ZSHARE "zshare"
+#define ZFILE "testfile"
+#define ZFILE2 "TESTDATASET/testfile2"
+#define ZFILE3 "testfile3"
+#define ZFILE4 "TESTDATASET/testfile4"
+#define ZPATH "/mnt/tank/zshare"
+#define ZPATH2 "/mnt/tank/zshare/TESTDATASET"
+
+static const char *null_string = NULL;
+static const char **empty_list = &null_string;
+static const char *default_test = "TESTSNAP*";
+static const char **default_prefix = &default_test;
+
+
+/**
+ * SMB2 connect with explicit share
+ **/
+static NTSTATUS torture_smb2_con_share(struct torture_context *tctx,
+                           const char *share,
+                           struct smb2_tree **tree)
+{
+        struct smbcli_options options;
+        NTSTATUS status;
+        const char *host = torture_setting_string(tctx, "host", NULL);
+
+        lpcfg_smbcli_options(tctx->lp_ctx, &options);
+
+        status = smb2_connect_ext(tctx,
+                                  host,
+                                  lpcfg_smb_ports(tctx->lp_ctx),
+                                  share,
+                                  lpcfg_resolve_context(tctx->lp_ctx),
+                                  popt_get_cmdline_credentials(),
+                                  0,
+                                  tree,
+                                  tctx->ev,
+                                  &options,
+                                  lpcfg_socket_options(tctx->lp_ctx),
+                                  lpcfg_gensec_settings(tctx, tctx->lp_ctx)
+                                  );
+        if (!NT_STATUS_IS_OK(status)) {
+                printf("Failed to connect to SMB2 share \\\\%s\\%s - %s\n",
+                       host, share, nt_errstr(status));
+        }
+        return status;
+}
+
+static bool test_zfs_enum_snaps(struct torture_context *tctx,
+				TALLOC_CTX *mem_ctx,
+				struct smb2_tree *tree,
+				struct smb2_handle fh,
+				int *_count)
+{
+	struct smb2_ioctl io;
+	NTSTATUS status;
+
+	ZERO_STRUCT(io);
+	io.level = RAW_IOCTL_SMB2;
+	io.in.file.handle = fh;
+	io.in.function = FSCTL_SRV_ENUM_SNAPS;
+	io.in.max_output_response = 16;
+	io.in.flags = SMB2_IOCTL_FLAG_IS_FSCTL;
+
+	status = smb2_ioctl(tree, mem_ctx, &io);
+	torture_assert_ntstatus_ok(tctx, status, "enum ioctl");
+
+	*_count = IVAL(io.out.out.data, 0);
+
+	/* with max_response_size=16, no labels should be sent */
+	torture_assert_int_equal(tctx, IVAL(io.out.out.data, 4), 0,
+				 "enum snaps labels");
+
+	/* TODO with 0 snaps, needed_data_count should be 0? */
+	if (*_count != 0) {
+		torture_assert(tctx, IVAL(io.out.out.data, 8) != 0,
+				"enum snaps needed non-zero");
+	}
+
+	return true;
+}
+
+
+static bool test_zfs_access_shadow_copy(struct torture_context *tctx,
+				        struct smb2_tree *tree_unused)
+{
+	NTSTATUS status;
+	TALLOC_CTX *tmp_ctx = talloc_new(tctx);
+	struct smb2_tree *tree_base = NULL;
+	struct smb2_handle base_fh, sub_fh;
+	struct smb2_handle vss_fh1, vss_fh2;
+	struct smblibzfshandle *libzp = NULL;
+	struct snapshot_list *snaps = NULL;
+	int count, ret;
+	ZERO_STRUCT(base_fh);
+	char *vss = NULL;
+	snaps = talloc_zero(tmp_ctx, struct snapshot_list);
+	status = torture_smb2_con_share(tctx, ZSHARE, &tree_base);
+	smb2_util_unlink(tree_base, ZFILE3);
+	status = torture_smb2_testfile_access(tree_base, ZFILE3, &base_fh,
+				SEC_STD_READ_CONTROL |
+				SEC_STD_WRITE_DAC |
+				SEC_RIGHTS_FILE_ALL);
+	torture_assert_ntstatus_ok(tctx, status, "base write open");
+	status = smb2_util_write(tree_base, base_fh, "pre-snap", 0,
+				 sizeof("pre-snap"));
+	torture_assert_ntstatus_ok(tctx, status, "src write");
+	ret = get_smblibzfs_handle(tmp_ctx, &libzp);
+	torture_assert_int_equal(tctx, ret, 0, "init libzfs handle");
+
+	/* test connectpath dataset */
+	torture_comment(tctx, "Create and test first snapshot\n");
+	ret = smb_zfs_snapshot(libzp, ZPATH, "TESTSNAP01", false);
+	torture_assert_int_equal(tctx, ret, 0, "zfs snapshot 01");
+	smb2_util_unlink(tree_base, ZFILE3);
+	snaps = smb_zfs_list_snapshots(libzp, tmp_ctx, ZPATH, false,
+				       default_prefix, empty_list, 0, 0);
+	torture_assert_not_null(tctx, snaps, "get snapshots");
+	vss = talloc_asprintf(tmp_ctx, "%s/%s", snaps->entries->label, ZFILE3);
+	torture_comment(tctx, "Preparing to access [%s]\n", vss);
+	status = torture_smb2_open(tree_base, vss, SEC_RIGHTS_FILE_READ, &vss_fh1);
+	torture_assert_ntstatus_ok(tctx, status, "vss1 open");
+
+	/* cleanup -- TODO: delete child dataset. */
+	torture_comment(tctx, "Removing snapshot.\n");
+	ret = smb_zfs_delete_snapshots(libzp, tmp_ctx, snaps);
+	torture_assert_int_equal(tctx, ret, 0, "zfs_delete_snapshots");
+
+	/* move on to child dataset */
+	status = torture_smb2_testfile_access(tree_base, ZFILE4, &sub_fh,
+				SEC_STD_READ_CONTROL |
+				SEC_STD_WRITE_DAC |
+				SEC_RIGHTS_FILE_ALL);
+	torture_assert_ntstatus_ok(tctx, status, "base write open");
+	status = smb2_util_write(tree_base, sub_fh, "pre-snap", 0,
+				 sizeof("pre-snap"));
+	torture_assert_ntstatus_ok(tctx, status, "src write");
+	torture_comment(tctx, "Create and test snapshot on subdataset\n");
+	ret = smb_zfs_snapshot(libzp, ZPATH2, "TESTSNAP01", false);
+	torture_assert_int_equal(tctx, ret, 0, "zfs snapshot 01");
+	smb2_util_unlink(tree_base, ZFILE4);
+	snaps = smb_zfs_list_snapshots(libzp, tmp_ctx, ZPATH2, false,
+				       default_prefix, empty_list, 0, 0);
+	torture_assert_not_null(tctx, snaps, "get snapshots");
+	TALLOC_FREE(vss);
+	vss = talloc_asprintf(tmp_ctx, "%s/%s", snaps->entries->label, ZFILE4);
+	torture_comment(tctx, "Preparing to access [%s]\n", vss);
+	status = torture_smb2_open(tree_base, vss, SEC_RIGHTS_FILE_READ, &vss_fh2);
+	torture_assert_ntstatus_ok(tctx, status, "vss2 open");
+
+	/* cleanup -- TODO: delete child dataset. */
+	torture_comment(tctx, "Removing snapshot.\n");
+	ret = smb_zfs_delete_snapshots(libzp, tmp_ctx, snaps);
+	torture_assert_int_equal(tctx, ret, 0, "zfs_delete_snapshots");
+
+	talloc_free(tmp_ctx);
+	return true;
+}
+
+static bool test_zfs_enum_created(struct torture_context *tctx,
+				  struct smb2_tree *tree_unused)
+{
+	NTSTATUS status;
+	TALLOC_CTX *tmp_ctx = talloc_new(tctx);
+	struct smb2_tree *tree_base = NULL;
+	struct smb2_handle base_fh;
+	struct smb2_handle sub_fh;
+	struct smblibzfshandle *libzp = NULL;
+	struct snapshot_list *snaps = NULL;
+	acl_t acl;
+	int count, ret;
+	ZERO_STRUCT(base_fh);
+	snaps = talloc_zero(tmp_ctx, struct snapshot_list);
+	torture_comment(tctx, "Connect to share [%s]\n", ZSHARE);
+	status = torture_smb2_con_share(tctx, ZSHARE, &tree_base);
+	torture_assert_ntstatus_ok(tctx, status,
+				   "Failed to connect to SMB2 share");
+
+	smb2_util_unlink(tree_base, ZFILE);
+	status = torture_smb2_testfile_access(tree_base, ZFILE, &base_fh,
+				SEC_STD_READ_CONTROL |
+				SEC_STD_WRITE_DAC |
+				SEC_RIGHTS_FILE_ALL);
+	torture_assert_ntstatus_ok(tctx, status, "base write open");
+
+	status = smb2_util_write(tree_base, base_fh, "pre-snap", 0,
+				 sizeof("pre-snap"));
+	torture_assert_ntstatus_ok(tctx, status, "src write");
+
+	torture_assert(tctx,
+		       test_zfs_enum_snaps(tctx, tmp_ctx, tree_base, base_fh,
+					     &count),
+		       "count");
+	torture_assert_int_equal(tctx, count, 0, "num snaps");
+
+	ret = get_smblibzfs_handle(tmp_ctx, &libzp);
+	torture_assert_int_equal(tctx, ret, 0, "init libzfs handle");
+	torture_comment(tctx, "Create and test first snapshot\n");
+	ret = smb_zfs_snapshot(libzp, ZPATH, "TESTSNAP01", false);
+	torture_assert_int_equal(tctx, ret, 0, "zfs snapshot 01");
+	smb2_util_unlink(tree_base, ZFILE);
+	torture_assert(tctx,
+		       test_zfs_enum_snaps(tctx, tmp_ctx, tree_base, base_fh,
+					     &count),
+		       "count");
+	torture_assert_int_equal(tctx, count, 1, "num snaps");
+
+	torture_comment(tctx, "Create and test second snapshot\n");
+	smb_msleep(1100);	/* @GMT tokens have a 1 second resolution */
+	ret = smb_zfs_snapshot(libzp, ZPATH, "TESTSNAP02", false);
+	torture_assert_int_equal(tctx, ret, 0, "zfs snapshot 02");
+
+	torture_assert(tctx,
+		       test_zfs_enum_snaps(tctx, tmp_ctx, tree_base, base_fh,
+					     &count),
+		       "count");
+	torture_assert_int_equal(tctx, count, 2, "num snaps");
+
+	/* test child dataset */
+	torture_comment(tctx, "Create and test child dataset.\n");
+	ret = smb_zfs_create_child_dataset(libzp, ZPATH, "TESTDATASET", 0);
+	torture_assert_int_equal(tctx, ret, 0, "create child dataset");
+
+	torture_comment(tctx, "Copying ACL from parent.\n");
+	acl = acl_get_file(ZPATH, ACL_TYPE_NFS4);
+	torture_assert_not_null(tctx, acl, "get parent ACL");
+	ret = acl_set_file(ZPATH2, ACL_TYPE_NFS4, acl);
+	torture_assert_int_equal(tctx, ret, 0, "set child ACL");
+
+	status = torture_smb2_testfile_access(tree_base, ZFILE2, &sub_fh,
+				SEC_STD_READ_CONTROL |
+				SEC_STD_WRITE_DAC |
+				SEC_RIGHTS_FILE_ALL);
+	torture_assert_ntstatus_ok(tctx, status, "base write open");
+	smb2_util_unlink(tree_base, ZFILE2);
+
+	torture_comment(tctx, "Checking snapshots on child dataset.\n");
+	torture_assert(tctx,
+		       test_zfs_enum_snaps(tctx, tmp_ctx, tree_base, sub_fh,
+					     &count),
+		       "count");
+	torture_assert_int_equal(tctx, count, 0, "num snaps");
+
+	/* cleanup -- TODO: delete child dataset. */
+	torture_comment(tctx, "Cleaning up.\n");
+	snaps = smb_zfs_list_snapshots(libzp, tmp_ctx, ZPATH, false,
+				       default_prefix, empty_list, 0, 0);
+
+	torture_assert_int_equal(tctx, snaps->num_entries, 2, "num snaps");
+
+	ret = smb_zfs_delete_snapshots(libzp, tmp_ctx, snaps);
+	torture_assert_int_equal(tctx, ret, 0, "zfs_delete_snapshots");
+
+	talloc_free(tmp_ctx);
+
+	return true;
+}
+
+struct torture_suite *torture_shadow_copy_zfs(TALLOC_CTX *ctx)
+{
+	struct torture_suite *suite = torture_suite_create(ctx, "shadow_copy_zfs");
+
+	torture_suite_add_1smb2_test(suite, "enum_created", test_zfs_enum_created);
+	torture_suite_add_1smb2_test(suite, "access_vss", test_zfs_access_shadow_copy);
+
+	suite->description = talloc_strdup(suite, "vfs_shadow_copy_zfs tests");
+
+	return suite;
+}
diff --git a/source4/torture/vfs/vfs.c b/source4/torture/vfs/vfs.c
index c26e31f147a..c56bee84d70 100644
--- a/source4/torture/vfs/vfs.c
+++ b/source4/torture/vfs/vfs.c
@@ -111,6 +111,8 @@ NTSTATUS torture_vfs_init(TALLOC_CTX *ctx)
 	torture_suite_add_suite(suite, torture_vfs_fruit(suite));
 	torture_suite_add_suite(suite, torture_vfs_fruit_netatalk(suite));
 	torture_suite_add_suite(suite, torture_acl_xattr(suite));
+	torture_suite_add_suite(suite, torture_shadow_copy_zfs(suite));
+	torture_suite_add_suite(suite, torture_ixnas(suite));
 	torture_suite_add_suite(suite, torture_vfs_fruit_file_id(suite));
 	torture_suite_add_suite(suite, torture_vfs_fruit_timemachine(suite));
 	torture_suite_add_suite(suite, torture_vfs_fruit_conversion(suite));
diff --git a/source4/torture/wscript_build b/source4/torture/wscript_build
index 65af160b322..876112a5fbc 100644
--- a/source4/torture/wscript_build
+++ b/source4/torture/wscript_build
@@ -289,9 +289,9 @@ bld.SAMBA_MODULE('TORTURE_NTP',
 	)
 
 bld.SAMBA_MODULE('TORTURE_VFS',
-	source='vfs/vfs.c vfs/fruit.c vfs/acl_xattr.c',
+	source='vfs/vfs.c vfs/fruit.c vfs/acl_xattr.c vfs/shadow_copy_zfs.c vfs/ixnas.c',
 	subsystem='smbtorture',
-	deps='LIBCLI_SMB POPT_CREDENTIALS TORTURE_UTIL smbclient-raw TORTURE_RAW',
+	deps='LIBCLI_SMB POPT_CREDENTIALS TORTURE_UTIL smbclient-raw TORTURE_RAW smb_libzfs',
 	internal_module=True,
 	autoproto='vfs/proto.h',
 	init_function='torture_vfs_init'
