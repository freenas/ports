diff --git a/lib/util/memcache.c b/lib/util/memcache.c
index 1e616bd0e9a..cc484e6f821 100644
--- a/lib/util/memcache.c
+++ b/lib/util/memcache.c
@@ -60,6 +60,7 @@ static bool memcache_is_talloc(enum memcache_number n)
 	case SINGLETON_CACHE_TALLOC:
 	case SHARE_MODE_LOCK_CACHE:
 	case GETWD_CACHE:
+	case ZSNAP_CACHE:
 	case VIRUSFILTER_SCAN_RESULTS_CACHE_TALLOC:
 		result = true;
 		break;
diff --git a/lib/util/memcache.h b/lib/util/memcache.h
index 4331c2f1465..a9de97ff291 100644
--- a/lib/util/memcache.h
+++ b/lib/util/memcache.h
@@ -46,6 +46,7 @@ enum memcache_number {
 	SMB1_SEARCH_OFFSET_MAP,
 	SHARE_MODE_LOCK_CACHE,	/* talloc */
 	VIRUSFILTER_SCAN_RESULTS_CACHE_TALLOC, /* talloc */
+	ZSNAP_CACHE,
 	DFREE_CACHE,
 };
 
diff --git a/source3/modules/vfs_shadow_copy_zfs.c b/source3/modules/vfs_shadow_copy_zfs.c
new file mode 100644
index 00000000000..bcfc85e3a1d
--- /dev/null
+++ b/source3/modules/vfs_shadow_copy_zfs.c
@@ -0,0 +1,1770 @@
+/* shadow_copy_zfs: a shadow copy module for ZFS
+ *
+ * Copyright (C) Andrew Tridgell   2007 (portions taken from shadow_copy_zfs)
+ * Copyright (C) Ed Plese          2009
+ * Copyright (C) Volker Lendecke   2011
+ * Copyright (C) Christian Ambach  2011
+ * Copyright (C) Michael Adam      2013
+ * Copyright (C) XStor Systems Inc 2011
+ * Copyright (C) iXsystems Inc     2016
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#include "includes.h"
+#include "smbd/smbd.h"
+#include "system/filesys.h"
+#include "include/ntioctl.h"
+#include "dbwrap/dbwrap.h"
+#include "dbwrap/dbwrap_open.h"
+#include "modules/smb_libzfs.h"
+#include "../lib/util/memcache.h"
+#include "util/util_tdb.h"
+
+#define GMT_NAME_LEN 24 /* length of a @GMT- name */
+
+#define SHADOW_COPY_ZFS_SNAP_DIR ".zfs/snapshot"
+
+#define SMB_FILENAME_NOT_VSS_NAME      0x00000010
+
+/*
+ * This module does the following:
+ * 1) Determines whether file path received from client contains an "@GMT token". This is
+ *    a special token that can be present as part of a file path to indicate a request to see
+ *    a previous version of the file or directory. The format is "@GMT-YYYY.MM.DD-HH.MM.SS".
+ *    This 16-bit Unicode string represents a time and date in UTC. If the path contains an
+ *    @GMT token, then redirect to the correct .zfs/snapshot path.
+ * 2) Generates snapshot list for FSCTL_SRV_ENUMERATE_SNAPSHOTS response.
+ *    shadow_copy_zfs_get_shadow_copy_zfs_data()
+ */
+
+static const char *null_string = NULL;
+static const char **empty_list = &null_string;
+static int vfs_shadow_copy_zfs_debug_level = DBGC_VFS;
+
+#undef DBGC_CLASS
+#define DBGC_CLASS vfs_shadow_copy_zfs_debug_level
+
+enum cachebackend {SHADOW_MEMCACHE, SHADOW_TDB};
+
+static const struct enum_list cachebackend[] = {
+	{SHADOW_MEMCACHE, "memcache"}, /* memcache backend for local paths */
+	{SHADOW_TDB, "tdb"}, /* tdb backend for cached local paths */
+	{ -1, NULL}
+};
+
+struct shadow_copy_zfs_config {
+	struct smblibzfshandle	*libzp;
+
+	/* Cache parameters */
+	bool 			cache_enabled;
+	enum cachebackend	cache_backend;
+	union {
+		struct db_context	*db;
+		struct memcache *mem;
+	} vss;
+
+	int			timedelta;
+
+	/* Snapshot parameters */
+	bool 			ignore_empty_snaps;	
+	const char 		*dataset_path;
+	const char 		**inclusions;
+	const char 		**exclusions;
+	struct snapshot_list 	*snapshots;
+
+	char			*shadow_connectpath;
+};
+
+static bool shadow_copy_zfs_find_slashes(TALLOC_CTX *mem_ctx, const char *str,
+				      size_t **poffsets,
+				      unsigned *pnum_offsets)
+{
+	unsigned num_offsets;
+	size_t *offsets;
+	const char *p;
+
+	num_offsets = 0;
+
+	p = str;
+	while ((p = strchr(p, '/')) != NULL) {
+		num_offsets += 1;
+		p += 1;
+	}
+
+	offsets = talloc_array(mem_ctx, size_t, num_offsets);
+	if (offsets == NULL) {
+		return false;
+	}
+
+	p = str;
+	num_offsets = 0;
+	while ((p = strchr(p, '/')) != NULL) {
+		offsets[num_offsets] = p-str;
+		num_offsets += 1;
+		p += 1;
+	}
+
+	*poffsets = offsets;
+	*pnum_offsets = num_offsets;
+	return true;
+}
+
+static struct snapshot_list *get_cached_snapshot(TDB_DATA ds,
+			   struct shadow_copy_zfs_config *config)
+{
+	return (struct snapshot_list *)memcache_lookup_talloc(
+				config->vss.mem,
+				ZSNAP_CACHE,
+				data_blob_const(ds.dptr, ds.dsize));
+}
+
+static bool put_cached_snapshot(TDB_DATA key,
+				struct snapshot_list *snaps,
+				struct shadow_copy_zfs_config *config)
+{
+	memcache_add_talloc(config->vss.mem,
+				ZSNAP_CACHE,
+				data_blob_const(key.dptr, key.dsize),
+				&snaps);
+	return true;
+}
+
+char *get_snapshot_path(TALLOC_CTX *mem_ctx,
+			char *connectpath, size_t clen,
+			char *mountpoint, size_t mplen,
+			char *filename, size_t flen,
+			char *mpoffset,
+			struct snapshot_entry *snap)
+{
+	DBG_DEBUG("connectpath: %s, clen: %zu, mountpoint: %s, mplen %zu "
+		  "filename: %s, flen %zu, mpoffset: %s, snapshot: %s\n",
+		  connectpath, clen, mountpoint, mplen, filename, flen,
+		  mpoffset, snap->name);
+	char *ret = NULL;
+	char *tmp_name = NULL;
+	bool is_child = false;
+	tmp_name = talloc_strdup(mem_ctx, filename);
+	if (mplen > clen) {
+		/*
+		 * This is not the same dataset as the one underlying the connectpath.
+		 */
+		is_child = true;
+		if (!(flen > (mplen - clen)) && (strcmp(mountpoint + clen, filename) == 0)) {
+			/* The path is a dataset mountpoint. Set last path component
+			 * to NULL so that we later exclude from our returned string.
+			 */
+			TALLOC_FREE(tmp_name);
+			tmp_name = NULL;
+		}
+		else {
+			tmp_name += (mplen - clen);
+		}
+	}
+	/*
+	 * A mountpoint offset occurs when a directory inside a dataset is shared
+	 * rather than the actual dataset mountpoint. We will only adjust the path
+	 * relative to the snapshot if (1) there's an offset and (2) if the
+	 * the path is not a child dataset. The mountpoint offset only applies to
+	 * the dataset underlying the share's connectpath (at least on TrueNAS).
+	 */
+	if (mpoffset && !is_child) {
+		if (flen) {
+			ret = talloc_asprintf(mem_ctx, "%s/.zfs/snapshot/%s/%s/%s",
+					      mountpoint, snap->name, mpoffset, tmp_name);
+		}
+		else {
+			ret = talloc_asprintf(mem_ctx, "%s/.zfs/snapshot/%s/%s",
+					      mountpoint, snap->name, mpoffset);
+		}
+	}
+	/*
+	 * Path is a dataset mountpoint for child dataset.
+	 */
+	else if (tmp_name == NULL) {
+		ret = talloc_asprintf(mem_ctx, "%s/.zfs/snapshot/%s",
+				      mountpoint, snap->name);
+	}
+	/*
+	 * All other cases. If needed, we have adjusted the pointer for
+	 * the filename to make it relative to the snapshot mountpoint
+	 * rather than the share connectpath.
+	 */
+	else {
+		ret = talloc_asprintf(mem_ctx, "%s/.zfs/snapshot/%s/%s",
+				      mountpoint, snap->name, tmp_name);
+	}
+	if (tmp_name) {
+		TALLOC_FREE(tmp_name);
+	}
+	return ret;
+}
+
+/**
+ * This function will check if snaplist is updated or not. If snaplist
+ * is empty then it will create a new list. Each time snaplist is updated
+ * the time is recorded. If the snapshot time is greater than the snaplist
+ * update time then chances are we are working on an older list. Then discard
+ * the old list and fetch a new snaplist. End-users can adjust the timeout
+ * period by adjusting the parameter "shadow:snap_timedelta=300"
+ *
+ * @param[in]	handle		VFS handle struct
+ * @param[in]	mem_ctx		talloc context
+ * @param[in]	path		full path in which to check snapshots
+ * @param[in]	do_update	update existing snapshot list cache
+ * @param[out]	snapp		snapshot list
+ *
+ * @return	true if the list is updated else false
+ */
+static bool shadow_copy_zfs_update_snaplist(struct vfs_handle_struct *handle,
+					    TALLOC_CTX *mem_ctx,
+					    const char *path,
+					    bool do_update,
+					    struct snapshot_list **snapp)
+{
+	bool snaplist_updated = false;
+	bool is_same_dataset = false;
+        double seconds = 0.0;
+	time_t snap_time;
+	char *dataset = NULL;
+	TDB_DATA key = { .dptr = NULL, .dsize = 0 };
+	struct shadow_copy_zfs_config *config = NULL;
+	struct snapshot_list *snapshots = NULL;
+	struct snapshot_list *cached_snaps = NULL;
+	time(&snap_time);
+	SMB_VFS_HANDLE_GET_DATA(handle, config, struct shadow_copy_zfs_config,
+	    return NULL);
+
+
+	smb_zfs_path_to_dataset(config->libzp, path, &dataset);
+
+	key.dptr = discard_const_p(uint8_t, dataset);
+	key.dsize = strlen(dataset);
+	cached_snaps = get_cached_snapshot(key, config);
+	if (cached_snaps != NULL) {
+		seconds = difftime(snap_time, cached_snaps->timestamp);
+	}
+
+	if (((seconds > config->timedelta) && do_update) || cached_snaps == NULL) {
+		DBG_INFO("refreshing stored snaplist - current timedelta: %f "
+			 "permitted timedelta: %d\n", seconds, config->timedelta);
+
+		snapshots = smb_zfs_list_snapshots(config->libzp,
+						   mem_ctx,
+						   path,
+						   config->ignore_empty_snaps,
+						   config->inclusions,
+						   config->exclusions, 0, 0);
+		if (snapshots != NULL) {
+			snaplist_updated = put_cached_snapshot(key, snapshots,
+							       config);
+		} else {
+			DBG_ERR("Failed to get shadow copy data for %s\n", path);
+		}
+		*snapp = snapshots;
+	}
+	else {
+		*snapp = cached_snaps;
+	}
+
+	return snaplist_updated;
+}
+
+static void set_smb_filename_flags(struct smb_filename *smb_fname,
+				   uint32_t flags)
+{
+	smb_fname->flags |= flags;
+}
+
+static inline bool shadow_copy_zfs_match_name(const struct smb_filename *name,
+					      const char **gmt_start)
+{
+	struct tm tm;
+	const char *p;
+	if (gmt_start) {
+		(*gmt_start) = NULL;
+	}
+	if ((name->flags & SMB_FILENAME_NOT_VSS_NAME) != 0) {
+		return false;
+	} 
+
+	if (strncmp(name->base_name, "@GMT-", 5) != 0) {
+		set_smb_filename_flags(discard_const_p(struct smb_filename, name),
+				       SMB_FILENAME_NOT_VSS_NAME);
+		return false;
+	}
+	p = strptime(name->base_name, GMT_FORMAT, &tm);
+	if (p[0] != 0 && p[0] != '/') {
+		set_smb_filename_flags(discard_const_p(struct smb_filename, name),
+				       SMB_FILENAME_NOT_VSS_NAME);
+		return False;
+	}
+	if (gmt_start) {
+		(*gmt_start) = p;
+	}
+	return True;
+}
+
+/*
+  Strip @GMT-XXXX in prep for path-to-zhandle calls. At this point
+  path has been normalized.
+ */
+
+static const char *shadow_copy_zfs_strip_gmt(TALLOC_CTX *mem_ctx,
+    char *path)
+{
+	char *pcopy;
+	size_t len = strlen(path);
+	if (GMT_NAME_LEN > len) {
+		DBG_ERR("path too short\n");
+		return NULL;
+	}
+	else if (GMT_NAME_LEN == len) {
+		DBG_INFO("returning root of share\n");
+		return talloc_strdup(mem_ctx, "");
+	}
+	pcopy = talloc_strdup(mem_ctx, path);
+	if (pcopy == NULL) {
+		DBG_ERR("path too short\n");
+		return NULL;
+	}
+	return pcopy += (GMT_NAME_LEN+1);
+}
+
+static char *shadow_copy_zfs_get_working_path(vfs_handle_struct *handle, TALLOC_CTX *mem_ctx,
+    char *path)
+{
+	int i = 0;
+	int ret;
+	char *pcopy = NULL;
+	char *parent = NULL;
+	size_t *slashes = NULL;
+	unsigned num_slashes;
+	pcopy = talloc_strdup(mem_ctx, path);
+	char rp[PATH_MAX] = { 0 };
+	if (pcopy == NULL) {
+		DBG_ERR("Memory error\n");
+		return NULL;
+	}
+	if (!shadow_copy_zfs_find_slashes(mem_ctx, pcopy, &slashes, &num_slashes)) {
+		TALLOC_FREE(pcopy);
+		TALLOC_FREE(slashes);
+		DBG_ERR("Failed to find slashes in path [%s]\n", path);
+		return NULL;
+	}
+	if ( num_slashes == 0 ) {
+		TALLOC_FREE(pcopy);
+		TALLOC_FREE(slashes);
+		return talloc_strdup(mem_ctx, handle->conn->connectpath);
+	}
+	for (i = 0; i<num_slashes+1; i++) {
+		if (!parent_dirname(mem_ctx, pcopy, &parent, NULL)) {
+			DBG_ERR("failed to generate parent dir name for %s\n", rp);
+			goto out;
+		}
+		if ((ret = access(parent, F_OK)) == 0) {
+			if (realpath(parent, rp) == NULL) {
+				DBG_ERR("Unable to get realpath for %s: %s\n",
+					parent, strerror(errno));
+				pcopy = NULL;
+				goto out;
+			}
+			TALLOC_FREE(pcopy);
+			pcopy = talloc_strdup(mem_ctx, rp);
+			goto out;
+		}
+		TALLOC_FREE(pcopy);
+		pcopy = talloc_strdup(mem_ctx, parent);
+		TALLOC_FREE(parent);
+	}
+	TALLOC_FREE(pcopy);
+	TALLOC_FREE(slashes);
+	return NULL;
+
+out:
+	TALLOC_FREE(slashes);
+	TALLOC_FREE(parent);
+	return pcopy;
+}
+
+static void store_connectpath(vfs_handle_struct *handle,
+				const char *connectpath)
+{
+	struct shadow_copy_zfs_config *priv = NULL;
+
+	SMB_VFS_HANDLE_GET_DATA(handle, priv, struct shadow_copy_zfs_config,
+				return);
+
+	TALLOC_FREE(priv->shadow_connectpath);
+	if (connectpath) {
+		DBG_INFO("shadow connectpath = %s\n", connectpath);
+		priv->shadow_connectpath = talloc_strdup(handle->conn, connectpath);
+		if (priv->shadow_connectpath == NULL) {
+			smb_panic("talloc failed\n");
+		}
+	}
+}
+
+
+static char *snapcache_get(TALLOC_CTX *tmp_ctx,
+			   vfs_handle_struct *handle,
+			   struct shadow_copy_zfs_config *config,
+			   TDB_DATA key)
+{
+	NTSTATUS status;
+	TDB_DATA data = { .dptr = NULL, .dsize = 0 };
+	if (config->cache_backend == SHADOW_TDB) {
+		status = dbwrap_fetch(config->vss.db, tmp_ctx,
+				      key,
+				      &data);
+		if (!NT_STATUS_IS_OK(status)) {
+			return NULL;
+		}
+		if (data.dptr == NULL) {
+			return NULL;
+		}
+		return (char *)data.dptr;
+	}
+	else {
+		return (char *)memcache_lookup_talloc(
+					config->vss.mem,
+					ZSNAP_CACHE,
+					data_blob_const(key.dptr, key.dsize));
+	}
+}
+
+static int snapcache_set(TALLOC_CTX *tmp_ctx,
+			  struct shadow_copy_zfs_config *config,
+			  TDB_DATA key,
+			  char *resolved_path)
+{
+	NTSTATUS status;
+	if (config->cache_backend == SHADOW_TDB) {
+		status = dbwrap_store(config->vss.db, key,
+				      string_term_tdb_data(resolved_path),
+				      TDB_INSERT);
+		if (!NT_STATUS_IS_OK(status)) {
+			DBG_ERR("Failed to generate tdb cache entry for %s\n",
+				resolved_path);	
+			return -1;
+		}
+		TALLOC_FREE(resolved_path);
+	}
+	else {
+		memcache_add_talloc(config->vss.mem,
+					ZSNAP_CACHE,
+					data_blob_const(key.dptr, key.dsize),
+					&resolved_path);
+	}
+	return 0;
+}
+
+/*
+ * Convert a filename containing an @GMT token to a path in the corresponding
+ * .zfs/snapshot/<snap_name> directory.
+ */
+static char *do_convert_shadow_zfs_name(vfs_handle_struct *handle,
+    const char *fname, const char *gmt_path, size_t *snaproot_len,
+    const bool incl_rel)
+{
+	TALLOC_CTX *tmp_ctx = talloc_new(handle->data);
+	struct shadow_copy_zfs_config *config = NULL;
+	struct snapshot_list *snapshots = NULL;
+	struct snapshot_entry *entry = NULL;
+	char *mpoffset = NULL;
+	size_t mplen, flen, clen;
+	char *ret = NULL;
+	char *normalized_fname = NULL;
+	char *cache_entry = NULL;
+	char rp[PATH_MAX] = { 0 };
+	TDB_DATA key = { .dptr = NULL, .dsize = 0 };
+
+	SMB_VFS_HANDLE_GET_DATA(handle, config, struct shadow_copy_zfs_config,
+	    return NULL);
+
+	/*
+	 * Converting from @GMT- token to a path inside a snapdir is expensive. First try to use
+	 * cached value if it exists.
+         */
+
+	if (config->cache_enabled) {
+		key.dptr = discard_const_p(uint8_t, fname);
+		key.dsize = strlen(fname);
+		ret = snapcache_get(tmp_ctx, handle, config, key);
+		if (ret != NULL) {
+			DBG_DEBUG("Retrieved cache entry for %s->%s\n",
+				  fname, ret);
+			cache_entry = talloc_strdup(talloc_tos(), ret);
+			TALLOC_FREE(tmp_ctx);
+			return cache_entry;
+		}
+	}
+
+	/*
+	 * Strip the @GMT- token in preparation for zfs_path_to_zhandle() in smb_zfs_list_snapshots()
+	 */
+	normalized_fname = shadow_copy_zfs_strip_gmt(tmp_ctx, fname);
+
+	if (access(normalized_fname, F_OK) < 0) {
+		normalized_fname = shadow_copy_zfs_get_working_path(handle, tmp_ctx, normalized_fname);
+		shadow_copy_zfs_update_snaplist(handle, handle->conn,
+						normalized_fname,
+						false, &snapshots);
+	}
+	else {
+		if (realpath(normalized_fname, rp) == NULL) {
+			DBG_ERR("realpath() failed for %s: %s\n", normalized_fname, strerror(errno));
+			TALLOC_FREE(tmp_ctx);
+			return NULL;
+		}
+		shadow_copy_zfs_update_snaplist(handle, handle->conn, rp, false, &snapshots);
+	}
+
+	if (snapshots == NULL) {
+		DBG_ERR("Failed to get snapshot list for %s\n",
+			normalized_fname);
+		TALLOC_FREE(tmp_ctx);
+		return NULL;
+	}
+
+	/* get snapshot name */
+	for (entry = snapshots->entries; entry; entry = entry->next) {
+		if (strncmp(fname, entry->label, GMT_NAME_LEN) == 0) {
+			break;
+		}
+	}
+	mplen = strlen(snapshots->mountpoint);
+	clen = strlen(handle->conn->connectpath);
+	flen = strlen(fname);
+	if (flen == GMT_NAME_LEN) {
+		flen = 0;
+	}
+	else {
+		flen -= (GMT_NAME_LEN + 1);
+	}
+
+	if (clen > mplen) {
+		mpoffset = talloc_strdup(tmp_ctx, handle->conn->connectpath + mplen + 1);
+	}
+
+	if (entry == NULL) {
+		DBG_INFO("Failed to retrieve snapshot entry for filename: %s, "
+			 "with snapshot mountpoint: %s\n", fname, snapshots->mountpoint);
+		if (strcmp(handle->conn->connectpath, snapshots->mountpoint) == 0) {
+			/*
+			 * Sub datasets can have snapshots that don't exist at the root
+			 * of the share. It appears that SMB clients still try to enter
+			 * the root of the share using the @GMT token of the sub-dataset
+			 * We need to allow access here, otherwise access to the snapshot
+			 * will fail.
+			 */
+			ret = talloc_strdup(talloc_tos(), snapshots->mountpoint);
+			TALLOC_FREE(tmp_ctx);
+			return ret;
+		}
+		else if (mpoffset) {
+			/*
+			 * In this cause we need to avoid granting access to the
+			 * snapshot mountpoint because share is a subdirectory inside a
+			 * dataset.
+			 */
+			ret = talloc_strdup(talloc_tos(), handle->conn->connectpath);
+			TALLOC_FREE(tmp_ctx);
+			return ret;
+		}
+		TALLOC_FREE(tmp_ctx);
+		return NULL;
+	}
+	ret = get_snapshot_path(talloc_tos(), handle->conn->connectpath, clen,
+				snapshots->mountpoint, mplen,
+				fname + GMT_NAME_LEN + 1, flen,
+				mpoffset, entry);
+
+	if ((snaproot_len != NULL) && normalized_fname && !ISDOT(normalized_fname)) {
+		*snaproot_len = strlen(ret);
+	}
+
+	if (config->cache_enabled) {
+		cache_entry = talloc_strdup(tmp_ctx, ret);
+		talloc_set_destructor(cache_entry, NULL);
+		snapcache_set(tmp_ctx, config, key, cache_entry);
+		DBG_INFO("Set cache entry for %s->%s\n",
+			 normalized_fname, ret);
+	}
+
+	TALLOC_FREE(tmp_ctx);
+	return ret;
+}
+
+static char *convert_shadow_zfs_name(vfs_handle_struct *handle,
+    const char *fname, const char *gmt_path,
+    const bool incl_rel)
+{
+	return do_convert_shadow_zfs_name(handle, fname, gmt_path, NULL, incl_rel);
+}
+
+static DIR *shadow_copy_zfs_opendir(vfs_handle_struct *handle,
+    const struct smb_filename *smb_fname,
+    const char *mask,
+    uint32_t attr)
+{
+	DIR *ret;
+	int saved_errno;
+	const char *gmt_start;
+	char *conv;
+	struct smb_filename *conv_smb_fname = NULL;
+
+	if (shadow_copy_zfs_match_name(smb_fname, &gmt_start)) {
+		conv = convert_shadow_zfs_name(handle, smb_fname->base_name,
+		     gmt_start, True);
+		if (conv == NULL) {
+			return NULL;
+		}
+
+		conv_smb_fname = synthetic_smb_fname(talloc_tos(),
+						     conv,
+						     NULL,
+						     NULL,
+						     smb_fname->flags);
+		if (conv_smb_fname == NULL) {
+			TALLOC_FREE(conv);
+			return NULL;
+		}
+
+		ret = SMB_VFS_NEXT_OPENDIR(handle, conv_smb_fname, mask, attr);
+		saved_errno = errno;
+		TALLOC_FREE(conv);
+		TALLOC_FREE(conv_smb_fname);
+		errno = saved_errno;
+		return ret;
+	} else {
+		return SMB_VFS_NEXT_OPENDIR(handle, smb_fname, mask, attr);
+	}
+}
+
+static int shadow_copy_zfs_rename(vfs_handle_struct *handle,
+			       const struct smb_filename *smb_fname_src,
+			       const struct smb_filename *smb_fname_dst)
+{
+	const char *gmt_start;
+	int ret_src, ret_dst;
+
+	ret_src = shadow_copy_zfs_match_name(smb_fname_src,
+					     &gmt_start);
+	ret_dst = shadow_copy_zfs_match_name(smb_fname_dst,
+					     &gmt_start);
+
+	if (ret_src != 0) {
+		errno = EXDEV;
+		return -1;
+	}
+
+	if (ret_dst != 0) {
+		errno = EROFS;
+		return -1;
+	}
+
+	return SMB_VFS_NEXT_RENAME(handle, smb_fname_src, smb_fname_dst);
+}
+
+static int shadow_copy_zfs_symlink(vfs_handle_struct *handle,
+				const char *link_contents, const struct smb_filename *new_smb_filename)
+{
+	const char *gmt_start;
+	int ret_old, ret_new;
+	struct smb_filename *fake_smb_fname = NULL;
+	fake_smb_fname = synthetic_smb_fname(talloc_tos(),
+					     link_contents,
+				 	     NULL,
+					     NULL,
+					     0);
+
+	ret_old = shadow_copy_zfs_match_name(fake_smb_fname, &gmt_start);
+	ret_new = shadow_copy_zfs_match_name(new_smb_filename, &gmt_start);
+
+	if ((ret_old != 0) || (ret_new != 0)) {
+		errno = EROFS;
+		return -1;
+	}
+
+	return SMB_VFS_NEXT_SYMLINK(handle, link_contents, new_smb_filename);
+}
+
+static int shadow_copy_zfs_link(vfs_handle_struct *handle,
+			     const struct smb_filename *oldname,
+			     const struct smb_filename *newname)
+{
+	const char *gmt_start;
+	int ret_old, ret_new;
+
+	ret_old = shadow_copy_zfs_match_name(oldname, &gmt_start);
+	ret_new = shadow_copy_zfs_match_name(newname, &gmt_start);
+
+	if ((ret_old != 0) || (ret_new != 0)) {
+		errno = EROFS;
+		return -1;
+	}
+
+	return SMB_VFS_NEXT_LINK(handle, oldname, newname);
+}
+
+static int shadow_copy_zfs_stat(vfs_handle_struct *handle,
+			     struct smb_filename *smb_fname)
+{
+	int ret, saved_errno;
+	const char *gmt_start;
+	char *conv;
+	struct smb_filename *conv_smb_fname;
+	char *tmp;
+
+	if (shadow_copy_zfs_match_name(smb_fname, &gmt_start)) {
+		tmp = smb_fname->base_name;
+		smb_fname->base_name = convert_shadow_zfs_name(
+		    handle, smb_fname->base_name, gmt_start, True);
+
+		if (smb_fname->base_name == NULL) {
+			smb_fname->base_name = tmp;
+			return -1;
+		}
+
+		ret = SMB_VFS_NEXT_STAT(handle, smb_fname);
+		saved_errno = errno;
+		TALLOC_FREE(smb_fname->base_name);
+		smb_fname->base_name = tmp;
+		errno = saved_errno;
+		return ret;
+	} else {
+		return SMB_VFS_NEXT_STAT(handle, smb_fname);
+	}
+}
+
+static int shadow_copy_zfs_lstat(vfs_handle_struct *handle,
+			      struct smb_filename *smb_fname)
+{
+	int ret, saved_errno;
+	const char *gmt_start;
+	char *tmp;
+
+	if (shadow_copy_zfs_match_name(smb_fname, &gmt_start)) {
+		tmp = smb_fname->base_name;
+		smb_fname->base_name = convert_shadow_zfs_name(
+		    handle, smb_fname->base_name, gmt_start, True);
+
+		if (smb_fname->base_name == NULL) {
+			smb_fname->base_name = tmp;
+			return -1;
+		}
+
+		ret = SMB_VFS_NEXT_LSTAT(handle, smb_fname);
+		saved_errno = errno;
+
+		TALLOC_FREE(smb_fname->base_name);
+		smb_fname->base_name = tmp;
+
+		errno = saved_errno;
+
+		return ret;
+	} else {
+		return SMB_VFS_NEXT_LSTAT(handle, smb_fname);
+	}
+}
+
+static int shadow_copy_zfs_fstat(vfs_handle_struct *handle, files_struct *fsp,
+			      SMB_STRUCT_STAT *sbuf)
+{
+	int ret;
+	const char *gmt_start;
+	struct smb_filename *orig_smb_fname = NULL;
+	struct smb_filename vss_smb_fname;
+	struct smb_filename *orig_base_smb_fname = NULL;
+	struct smb_filename vss_base_smb_fname;
+	char *stripped = NULL;
+	if (!shadow_copy_zfs_match_name(fsp->fsp_name, &gmt_start)) {
+		ret = SMB_VFS_NEXT_FSTAT(handle, fsp, sbuf);
+		if (ret == -1) {
+			return ret;
+		}
+		return 0;
+	}
+
+	vss_smb_fname = *fsp->fsp_name;
+	vss_smb_fname.base_name = convert_shadow_zfs_name(handle,
+				 fsp->fsp_name->base_name, gmt_start, True);
+
+	if (vss_smb_fname.base_name == NULL) {
+		return -1;
+	}
+
+	orig_smb_fname = fsp->fsp_name;
+	fsp->fsp_name = &vss_smb_fname;
+
+	if (fsp->base_fsp != NULL) {
+		vss_base_smb_fname = *fsp->base_fsp->fsp_name;
+		vss_base_smb_fname.base_name = vss_smb_fname.base_name;
+		orig_base_smb_fname = fsp->base_fsp->fsp_name;
+		fsp->base_fsp->fsp_name = &vss_base_smb_fname;
+	}
+
+	ret = SMB_VFS_NEXT_FSTAT(handle, fsp, sbuf);
+
+	fsp->fsp_name = orig_smb_fname;
+	if (fsp->base_fsp != NULL) {
+		fsp->base_fsp->fsp_name = orig_base_smb_fname;
+	}
+	return ret;
+}
+
+static int shadow_copy_zfs_open(vfs_handle_struct *handle,
+			     struct smb_filename *smb_fname, files_struct *fsp,
+			     int flags, mode_t mode)
+{
+	int ret, saved_errno;
+	const char *gmt_start;
+	char *tmp;
+
+	if (shadow_copy_zfs_match_name(smb_fname, &gmt_start)) {
+		tmp = smb_fname->base_name;
+		smb_fname->base_name = convert_shadow_zfs_name(
+		    handle, smb_fname->base_name, gmt_start, True);
+
+		if (smb_fname->base_name == NULL) {
+			smb_fname->base_name = tmp;
+			return -1;
+		}
+		/*
+		 * Overwrite user requested flags with O_RDONLY.
+		 */
+		flags = O_RDONLY;
+
+		ret = SMB_VFS_NEXT_OPEN(handle, smb_fname, fsp, flags, mode);
+		if (ret != 0) {
+			saved_errno = errno;
+		}
+
+		TALLOC_FREE(smb_fname->base_name);
+		smb_fname->base_name = tmp;
+
+		if (saved_errno != 0) {
+			errno = saved_errno;
+		}
+		return ret;
+	} else {
+		return SMB_VFS_NEXT_OPEN(handle, smb_fname, fsp, flags, mode);
+	}
+}
+
+static int shadow_copy_zfs_unlink(vfs_handle_struct *handle,
+			       const struct smb_filename *smb_fname) {
+	int ret, saved_errno;
+	const char *gmt_start;
+	struct smb_filename *conv;
+
+	if (shadow_copy_zfs_match_name(smb_fname, &gmt_start)) {
+		errno = EROFS;
+		return -1;
+	} else {
+		return SMB_VFS_NEXT_UNLINK(handle, smb_fname);
+	}
+}
+
+static int shadow_copy_zfs_chmod(vfs_handle_struct *handle,
+    const struct smb_filename *smb_fname,
+    mode_t mode)
+{
+	int ret, saved_errno;
+	const char *gmt_start;
+	char *conv;
+	struct smb_filename *conv_smb_fname = NULL;
+
+	if (shadow_copy_zfs_match_name(smb_fname, &gmt_start)) {
+		errno = EROFS;
+		return -1;
+	} else {
+		return SMB_VFS_NEXT_CHMOD(handle, smb_fname, mode);
+	}
+}
+
+static int shadow_copy_zfs_chown(vfs_handle_struct *handle,
+    const struct smb_filename *smb_fname,
+    uid_t uid,
+    gid_t gid)
+{
+	int ret, saved_errno;
+	const char *gmt_start;
+	char *conv;
+	struct smb_filename *conv_smb_fname = NULL;
+
+	if (shadow_copy_zfs_match_name(smb_fname, &gmt_start)) {
+		errno = EROFS;
+		return -1;
+	} else {
+		return SMB_VFS_NEXT_CHOWN(handle, smb_fname, uid, gid);
+	}
+}
+
+static int shadow_copy_zfs_chdir(vfs_handle_struct *handle,
+			      const struct smb_filename *smb_fname)
+{
+	int ret, saved_errno;
+	const char *gmt_start;
+	char *conv = NULL;
+	size_t rootpath_len = 0;
+	struct smb_filename *conv_smb_fname = NULL;
+	struct shadow_copy_zfs_config *config = NULL;
+
+	SMB_VFS_HANDLE_GET_DATA(handle, config, struct shadow_copy_zfs_config,
+				return -1);
+
+
+	if (!shadow_copy_zfs_match_name(smb_fname, &gmt_start)) {
+		conv_smb_fname = cp_smb_filename(talloc_tos(), smb_fname);
+	}
+	else {
+		conv = do_convert_shadow_zfs_name(handle, smb_fname->base_name, gmt_start, &rootpath_len, True);
+		if (conv == NULL) {
+			return -1;
+		}
+
+		conv_smb_fname = synthetic_smb_fname(talloc_tos(),
+						     conv,
+						     NULL,
+						     NULL,
+						     smb_fname->flags);
+		if (conv_smb_fname == NULL) {
+			TALLOC_FREE(conv);
+			return -1;
+		}
+
+	}
+	ret = SMB_VFS_NEXT_CHDIR(handle, conv_smb_fname);
+	if (ret ==-1) {
+		saved_errno = errno;
+	}
+	if (ret == 0) {
+		if (rootpath_len != 0) {
+			conv[rootpath_len] = '\0';
+		}
+		store_connectpath(handle, conv);
+	}
+	if (conv != NULL) {
+		TALLOC_FREE(conv);
+	}
+	TALLOC_FREE(conv_smb_fname);
+	if (saved_errno != 0) {
+		errno = saved_errno;
+	}
+	return ret;
+}
+
+static int shadow_copy_zfs_ntimes(vfs_handle_struct *handle,
+			       const struct smb_filename *smb_fname,
+			       struct smb_file_time *ft) {
+	int ret, saved_errno;
+	const char *gmt_start;
+	struct smb_filename *conv;
+
+	if (shadow_copy_zfs_match_name(smb_fname, &gmt_start)) {
+		errno = EROFS;
+		return -1;
+	} else {
+		return SMB_VFS_NEXT_NTIMES(handle, smb_fname, ft);
+	}
+}
+
+static int shadow_copy_zfs_readlink(vfs_handle_struct *handle,
+				 const struct smb_filename *smb_fname,
+				 char *buf,
+				 size_t bufsiz)
+{
+	int ret, saved_errno;
+	const char *gmt_start;
+	struct smb_filename *conv = NULL;
+
+	if (shadow_copy_zfs_match_name(smb_fname, &gmt_start)) {
+		conv = cp_smb_filename(talloc_tos(), smb_fname);
+		if (conv == NULL) {
+			return -1;
+		}
+		conv->base_name = convert_shadow_zfs_name(handle, smb_fname->base_name, gmt_start, True);
+
+		if (conv->base_name == NULL){
+			TALLOC_FREE(conv);
+			return -1;
+		}
+		ret = SMB_VFS_NEXT_READLINK(handle, conv, buf, bufsiz);
+		saved_errno = errno;
+		TALLOC_FREE(conv);
+		errno = saved_errno;
+		return ret;
+	} else {
+		return SMB_VFS_NEXT_READLINK(handle, smb_fname, buf, bufsiz);
+	}
+}
+
+static int shadow_copy_zfs_mknod(vfs_handle_struct *handle,
+				const struct smb_filename *smb_fname,
+				mode_t mode,
+				SMB_DEV_T dev)
+{
+	int ret, saved_errno;
+	const char *gmt_start;
+	char *conv;
+	struct smb_filename *conv_smb_fname;
+
+	if (shadow_copy_zfs_match_name(smb_fname, &gmt_start)) {
+		errno = EROFS;
+		return -1;
+	} else {
+		return SMB_VFS_NEXT_MKNOD(handle, smb_fname, mode, dev);
+	}
+}
+
+static struct smb_filename *shadow_copy_zfs_realpath(vfs_handle_struct *handle, TALLOC_CTX *ctx,
+				   const struct smb_filename *smb_fname)
+{
+	struct smb_filename *ret = NULL;
+	int saved_errno;
+	const char *gmt_start;
+	char *conv;
+	struct smb_filename *conv_smb_fname;
+
+	if (shadow_copy_zfs_match_name(smb_fname, &gmt_start)) {
+		conv = convert_shadow_zfs_name(handle, smb_fname->base_name, gmt_start, True);
+		if (conv == NULL) {
+			TALLOC_FREE(conv);
+			return NULL;
+		}
+		conv_smb_fname = synthetic_smb_fname(talloc_tos(),
+						     conv,
+						     NULL,
+						     NULL,
+						     smb_fname->flags);
+		if (conv_smb_fname == NULL) {
+			TALLOC_FREE(conv);
+			return NULL;
+		}
+
+		ret = SMB_VFS_NEXT_REALPATH(handle, ctx, conv_smb_fname);
+		saved_errno = errno;
+		TALLOC_FREE(conv);
+		TALLOC_FREE(conv_smb_fname);
+		errno = saved_errno;
+		return ret;
+	} else {
+		return SMB_VFS_NEXT_REALPATH(handle, ctx, smb_fname);
+	}
+}
+
+static int shadow_copy_zfs_get_shadow_copy_zfs_data(vfs_handle_struct *handle,
+						    files_struct *fsp,
+						    struct shadow_copy_data
+						    *shadow_copy_zfs_data,
+						    bool labels)
+{
+	TALLOC_CTX *tmp_ctx = NULL;
+	struct shadow_copy_zfs_config *config = NULL;
+	struct snapshot_list *snapshots = NULL;
+	struct snapshot_entry *entry = NULL;
+	SMB_STRUCT_STAT sbuf, cur_st, prev_st;
+	const SMB_STRUCT_STAT *psbuf = NULL;
+	uint idx = 0;
+	char tmpbuf[PATH_MAX];
+	char *fullpath, *to_free;
+	char *tmp_file = NULL;
+	char *file_name = NULL;
+	char *mpoffset = NULL;
+	ssize_t len, cpathlen, mplen, flen;
+	int rv;
+	cpathlen = strlen(handle->conn->connectpath);
+
+	len = full_path_tos(handle->conn->connectpath, fsp->fsp_name->base_name, tmpbuf,
+			    sizeof(tmpbuf), &fullpath, &to_free);
+
+	if (len == -1) {
+		errno = ENOMEM;
+		return -1;
+	}
+
+	SMB_VFS_HANDLE_GET_DATA(handle, config, struct shadow_copy_zfs_config,
+	    return -1);
+
+	tmp_ctx = talloc_new(config);
+
+	if (VALID_STAT(fsp->fsp_name->st)) {
+		psbuf = &fsp->fsp_name->st;
+	}
+
+	if (psbuf == NULL) {
+		rv = vfs_stat_smb_basename(handle->conn, fsp->fsp_name, &sbuf);
+		if (rv != 0) {
+			DBG_ERR("stat [%s]failed: %s\n",
+				fsp_str_dbg(fsp), strerror(errno));
+			return -1;
+		}
+		psbuf = &sbuf;
+	}
+	prev_st = *psbuf;
+
+	shadow_copy_zfs_update_snaplist(handle,
+					handle->conn,
+					fullpath,
+					true,
+					&snapshots);
+
+	if (snapshots == NULL) {
+		DBG_INFO("failed to retrieve snapshots for %s\n", fullpath);
+		TALLOC_FREE(tmp_ctx);
+		TALLOC_FREE(to_free);
+		return -1;
+	}
+	shadow_copy_zfs_data->labels = NULL;
+	DBG_INFO("Retrieved %zu snapshots for %s\n",
+		 snapshots->num_entries, fsp_str_dbg(fsp));
+
+	if (labels) {
+		shadow_copy_zfs_data->labels =
+			talloc_array(shadow_copy_zfs_data,
+				     SHADOW_COPY_LABEL,
+				     snapshots->num_entries);
+
+		if (shadow_copy_zfs_data->labels == NULL) {
+			DEBUG(0,("shadow_copy_zfs: out of memory\n"));
+			TALLOC_FREE(tmp_ctx);
+			TALLOC_FREE(to_free);
+			return -1;
+		}
+	}
+	mplen = strlen(snapshots->mountpoint);
+	flen = strlen(fsp->fsp_name->base_name);
+	if (cpathlen > mplen) {
+		/*
+		 * Connectpath for share is longer than the dataset mountpoint.
+		 * This happens if share is directory outside of mountpoint, which
+		 * most commonly occurs when share is a [homes] share.
+		 */
+		mpoffset = talloc_strdup(tmp_ctx, (handle->conn->connectpath + mplen + 1));
+	}
+
+	for (entry = snapshots->entries; entry; entry = entry->next) {
+		/*
+		 * Directories should always be added if they exist in the
+		 * snapshot. Files only be added if mtime differs.
+		 */
+		tmp_file = get_snapshot_path(tmp_ctx, handle->conn->connectpath,
+					     cpathlen, snapshots->mountpoint,
+					     mplen, fsp->fsp_name->base_name,
+					     flen, mpoffset, entry);
+
+		rv = sys_stat(tmp_file, &cur_st, false);
+		TALLOC_FREE(tmp_file);
+		if (rv != 0) {
+			DBG_INFO("stat() failed for [%s] in mp [%s] snap [%s]: %s\n",
+				 fsp_str_dbg(fsp), snapshots->mountpoint, entry->name,
+				 strerror(errno));
+			continue;
+		}
+		if (config->ignore_empty_snaps && !S_ISDIR(cur_st.st_ex_mode) &&
+		    (timespec_compare(&cur_st.st_ex_mtime, &prev_st.st_ex_mtime) == 0)) {
+			continue;
+			}
+		if (labels) {
+			strlcpy(shadow_copy_zfs_data->labels[idx],
+				entry->label, sizeof(entry->label));
+		}
+		idx++;
+		prev_st = cur_st;
+	}
+
+	shadow_copy_zfs_data->num_volumes = idx;
+	TALLOC_FREE(to_free);
+	TALLOC_FREE(tmp_ctx);
+	return 0;
+}
+
+static NTSTATUS shadow_copy_zfs_fget_nt_acl(vfs_handle_struct *handle,
+					struct files_struct *fsp,
+					uint32_t security_info,
+					TALLOC_CTX *mem_ctx,
+					struct security_descriptor **ppdesc)
+{
+	NTSTATUS ret;
+	int saved_errno;
+	const char *gmt_start;
+	char *conv;
+	struct smb_filename *smb_fname = NULL;
+
+	if (shadow_copy_zfs_match_name(fsp->fsp_name, &gmt_start)) {
+		conv = convert_shadow_zfs_name(handle, fsp->fsp_name->base_name,
+					       gmt_start, True);
+		if (conv == NULL) {
+			return map_nt_error_from_unix(errno);
+		}
+
+		smb_fname = synthetic_smb_fname(talloc_tos(),
+						conv,
+						NULL,
+						NULL,
+						fsp->fsp_name->flags);
+		if (smb_fname == NULL) {
+			TALLOC_FREE(conv);
+			return NT_STATUS_NO_MEMORY;
+		}
+
+		ret = SMB_VFS_NEXT_GET_NT_ACL(handle, smb_fname, security_info,
+					      mem_ctx, ppdesc);
+		saved_errno = errno;
+		TALLOC_FREE(conv);
+		TALLOC_FREE(smb_fname);
+		errno = saved_errno;
+		return ret;
+	} else {
+		return SMB_VFS_NEXT_FGET_NT_ACL(handle, fsp, security_info,
+					       mem_ctx, ppdesc);
+	}
+}
+
+static NTSTATUS shadow_copy_zfs_get_nt_acl(vfs_handle_struct *handle,
+    const struct smb_filename *smb_fname,
+    uint32_t security_info,
+    TALLOC_CTX *mem_ctx,
+    struct security_descriptor **ppdesc)
+{
+	NTSTATUS ret;
+	int saved_errno;
+	const char *gmt_start;
+	char *conv;
+	struct smb_filename *conv_smb_fname = NULL;
+
+	if (shadow_copy_zfs_match_name(smb_fname, &gmt_start)) {
+		conv = convert_shadow_zfs_name(handle, smb_fname->base_name,
+					       gmt_start, True);
+		if (conv == NULL) {
+			return map_nt_error_from_unix(errno);
+		}
+
+		conv_smb_fname = synthetic_smb_fname(talloc_tos(),
+						     conv,
+						     NULL,
+						     NULL,
+						     smb_fname->flags);
+		if (conv_smb_fname == NULL) {
+			TALLOC_FREE(conv);
+			return NT_STATUS_NO_MEMORY;
+		}
+
+		ret = SMB_VFS_NEXT_GET_NT_ACL(handle, conv_smb_fname,
+					      security_info, mem_ctx, ppdesc);
+		saved_errno = errno;
+		TALLOC_FREE(conv);
+		TALLOC_FREE(conv_smb_fname);
+		errno = saved_errno;
+		return ret;
+	} else {
+		return SMB_VFS_NEXT_GET_NT_ACL(handle, smb_fname, security_info,
+					       mem_ctx, ppdesc);
+	}
+}
+
+static int shadow_copy_zfs_mkdir(vfs_handle_struct *handle,
+    const struct smb_filename *smb_fname, mode_t mode)
+{
+	int ret, saved_errno;
+	const char *gmt_start;
+	char *conv;
+	struct smb_filename *conv_smb_fname = NULL;
+
+	if (shadow_copy_zfs_match_name(smb_fname, &gmt_start)) {
+		errno = EROFS;
+		return -1;
+	} else {
+		return SMB_VFS_NEXT_MKDIR(handle, smb_fname, mode);
+	}
+}
+
+static int shadow_copy_zfs_rmdir(vfs_handle_struct *handle,
+    const struct smb_filename *smb_fname)
+{
+	int ret, saved_errno;
+	const char *gmt_start;
+	char *conv;
+	struct smb_filename *conv_smb_fname = NULL;
+
+	if (shadow_copy_zfs_match_name(smb_fname, &gmt_start)) {
+		errno = EROFS;
+		return -1;
+	} else {
+		return SMB_VFS_NEXT_RMDIR(handle, smb_fname);
+	}
+}
+
+static int shadow_copy_zfs_chflags(vfs_handle_struct *handle,
+				const struct smb_filename *smb_fname,
+				unsigned int flags)
+{
+	int ret, saved_errno;
+	const char *gmt_start;
+	char *conv;
+	struct smb_filename *conv_smb_fname = NULL;
+
+	if (shadow_copy_zfs_match_name(smb_fname, &gmt_start)) {
+		errno = EROFS;
+		return -1;
+	} else {
+		return SMB_VFS_NEXT_CHFLAGS(handle, smb_fname, flags);
+	}
+}
+
+static ssize_t shadow_copy_zfs_getxattr(vfs_handle_struct *handle,
+				const struct smb_filename *smb_fname,
+				const char *aname,
+				void *value,
+				size_t size)
+{
+	int ret, saved_errno;
+	const char *gmt_start;
+	char *conv;
+	struct smb_filename *conv_smb_fname = NULL;
+
+	if (shadow_copy_zfs_match_name(smb_fname, &gmt_start)) {
+		conv = convert_shadow_zfs_name(handle, smb_fname->base_name, gmt_start, True);
+		if (conv == NULL) {
+			return -1;
+		}
+		conv_smb_fname = synthetic_smb_fname(talloc_tos(),
+						conv,
+						NULL,
+						NULL,
+						smb_fname->flags);
+		if (conv_smb_fname == NULL) {
+			TALLOC_FREE(conv);
+			return -1;
+		}
+
+		ret = SMB_VFS_NEXT_GETXATTR(handle, conv_smb_fname, aname, value,
+					    size);
+		saved_errno = errno;
+		TALLOC_FREE(conv);
+		TALLOC_FREE(conv_smb_fname);
+		errno = saved_errno;
+		return ret;
+	} else {
+		return SMB_VFS_NEXT_GETXATTR(handle, smb_fname, aname, value,
+					     size);
+	}
+}
+
+static ssize_t shadow_copy_zfs_listxattr(struct vfs_handle_struct *handle,
+				const struct smb_filename *smb_fname,
+				char *list,
+				size_t size)
+{
+	int ret, saved_errno;
+	const char *gmt_start;
+	char *conv;
+	struct smb_filename *conv_smb_fname = NULL;
+
+	if (shadow_copy_zfs_match_name(smb_fname, &gmt_start)) {
+		conv = convert_shadow_zfs_name(handle, smb_fname->base_name, gmt_start, True);
+		if (conv == NULL) {
+			return -1;
+		}
+		conv_smb_fname = synthetic_smb_fname(talloc_tos(),
+						conv,
+						NULL,
+						NULL,
+						smb_fname->flags);
+		if (conv_smb_fname == NULL) {
+			TALLOC_FREE(conv);
+			return -1;
+		}
+
+		ret = SMB_VFS_NEXT_LISTXATTR(handle, conv_smb_fname, list, size);
+		saved_errno = errno;
+		TALLOC_FREE(conv);
+		TALLOC_FREE(conv_smb_fname);
+		errno = saved_errno;
+		return ret;
+	} else {
+		return SMB_VFS_NEXT_LISTXATTR(handle, smb_fname, list, size);
+	}
+}
+
+static int shadow_copy_zfs_removexattr(vfs_handle_struct *handle,
+				const struct smb_filename *smb_fname,
+				const char *aname)
+{
+	int ret, saved_errno;
+	const char *gmt_start;
+	char *conv;
+	struct smb_filename *conv_smb_fname = NULL;
+
+	if (shadow_copy_zfs_match_name(smb_fname, &gmt_start)) {
+		errno = EROFS;
+		return -1;
+	} else {
+		return SMB_VFS_NEXT_REMOVEXATTR(handle, smb_fname, aname);
+	}
+}
+
+static int shadow_copy_zfs_setxattr(struct vfs_handle_struct *handle,
+				const struct smb_filename *smb_fname,
+				const char *aname,
+				const void *value,
+				size_t size,
+				int flags)
+{
+	int ret, saved_errno;
+	const char *gmt_start;
+	char *conv;
+	struct smb_filename *conv_smb_fname = NULL;
+
+	if (shadow_copy_zfs_match_name(smb_fname, &gmt_start)) {
+		errno = EROFS;
+		return -1;
+	} else {
+		return SMB_VFS_NEXT_SETXATTR(handle, smb_fname, aname, value, size,
+					     flags);
+	}
+}
+
+static int shadow_copy_zfs_get_real_filename(struct vfs_handle_struct *handle,
+					  const char *path,
+					  const char *name,
+					  TALLOC_CTX *mem_ctx,
+					  char **found_name)
+{
+	const char *gmt_start;
+	ssize_t ret;
+	int saved_errno;
+	char *conv;
+	struct smb_filename *fake_smb_fname = NULL;
+
+	fake_smb_fname = synthetic_smb_fname(talloc_tos(),
+					     path,
+				 	     NULL,
+					     NULL,
+					     0);
+
+	if (shadow_copy_zfs_match_name(fake_smb_fname, &gmt_start)) {
+		conv = convert_shadow_zfs_name(handle, path, gmt_start, True);
+		if (conv == NULL) {
+			return -1;
+		}
+
+		ret = SMB_VFS_NEXT_GET_REAL_FILENAME(handle, conv, name,
+						     mem_ctx, found_name);
+		saved_errno = errno;
+		TALLOC_FREE(conv);
+		errno = saved_errno;
+		return ret;
+	} else {
+		return SMB_VFS_NEXT_GET_REAL_FILENAME(handle, path, name,
+						      mem_ctx, found_name);
+	}
+}
+
+static const char *shadow_copy_zfs_connectpath(struct vfs_handle_struct *handle,
+					    const struct smb_filename *smb_fname)
+{
+	const char *ret;
+	int saved_errno;
+	const char *gmt_start;
+	char *conv;
+	const struct smb_filename *conv_smb_fname = NULL;
+	const struct smb_filename *tmp_smb_fname = NULL;
+	struct shadow_copy_zfs_config *config = NULL;
+
+	SMB_VFS_HANDLE_GET_DATA(handle, config, struct shadow_copy_zfs_config,
+				return NULL);
+
+	if (config->shadow_connectpath != NULL) {
+		DBG_INFO("cached connect path is [%s]\n",
+			config->shadow_connectpath);
+		return config->shadow_connectpath;
+	}
+
+	if (shadow_copy_zfs_match_name(smb_fname, &gmt_start)) {
+		return convert_shadow_zfs_name(handle, smb_fname->base_name, gmt_start, True);
+	} else {
+		return SMB_VFS_NEXT_CONNECTPATH(handle, smb_fname);
+	}
+}
+
+static uint64_t shadow_copy_zfs_disk_free(vfs_handle_struct *handle,
+				const struct smb_filename *smb_fname,
+				uint64_t *bsize,
+				uint64_t *dfree,
+				uint64_t *dsize)
+{
+	uint64_t ret = (uint64_t)-1;
+	int saved_errno;
+	const char *gmt_start;
+	char *conv;
+	struct smb_filename *conv_smb_fname = NULL;
+
+	if (shadow_copy_zfs_match_name(smb_fname, &gmt_start)) {
+		conv = convert_shadow_zfs_name(handle, smb_fname->base_name, gmt_start, True);
+		if (conv == NULL) {
+			return (uint64_t)-1;
+		}
+		conv_smb_fname = synthetic_smb_fname(talloc_tos(),
+						conv,
+						NULL,
+						NULL,
+						smb_fname->flags);
+		if (conv_smb_fname == NULL) {
+			TALLOC_FREE(conv);
+			return -1;
+		}
+
+		ret = SMB_VFS_NEXT_DISK_FREE(handle, conv_smb_fname, bsize, dfree, dsize);
+		saved_errno = errno;
+		TALLOC_FREE(conv);
+		TALLOC_FREE(conv_smb_fname);
+		errno = saved_errno;
+		return ret;
+	} else {
+		return SMB_VFS_NEXT_DISK_FREE(handle, smb_fname, bsize, dfree,
+					      dsize);
+	}
+}
+
+static int shadow_copy_zfs_get_quota(vfs_handle_struct *handle, const struct smb_filename *smb_fname,
+				  enum SMB_QUOTA_TYPE qtype, unid_t id,
+				  SMB_DISK_QUOTA *dq)
+{
+	int ret, saved_errno;
+	const char *gmt_start;
+	char *conv;
+	struct smb_filename *conv_smb_fname = NULL;
+
+	if (shadow_copy_zfs_match_name(smb_fname, &gmt_start)) {
+		conv = convert_shadow_zfs_name(handle, smb_fname->base_name, gmt_start, True);
+		if (conv == NULL) {
+			return -1;
+		}
+		conv_smb_fname = synthetic_smb_fname(talloc_tos(),
+						conv,
+						NULL,
+						NULL,
+						smb_fname->flags);
+		if (conv_smb_fname == NULL) {
+			TALLOC_FREE(conv);
+			return -1;
+		}
+
+		ret = SMB_VFS_NEXT_GET_QUOTA(handle, conv_smb_fname, qtype, id, dq);
+		saved_errno = errno;
+		TALLOC_FREE(conv);
+		TALLOC_FREE(conv_smb_fname);
+		errno = saved_errno;
+		return ret;
+	} else {
+		return SMB_VFS_NEXT_GET_QUOTA(handle, smb_fname, qtype, id, dq);
+	}
+}
+
+static int generate_db_filename(const char *connectpath, char **db_name)
+{
+	/*
+	 * We use separate per-share shadow copy caches. Used hashed
+	 * value of connectpath to uniquely identify tdb files so that
+	 * cache persists across share renames.
+	 */
+	uint32_t shash;
+	TDB_DATA key = { .dptr = discard_const_p(uint8_t, connectpath),
+                                 .dsize = strlen(connectpath) };
+
+	shash = tdb_jenkins_hash(&key);
+	if (shash == 0) {
+		DBG_ERR("Shash was 0\n");
+		shash = 1;
+	}
+	*db_name = talloc_asprintf(talloc_tos(), "%s/shadow_copy_cache-%04X.tdb",
+				   lp_cache_directory(), shash);
+
+	return 0;
+}
+
+static int initialize_cache_tdb(struct shadow_copy_zfs_config *config,
+				const char *connectpath)
+{
+	int ret;
+	char *db_name;
+	struct db_context *vss_db = NULL;
+	ret = generate_db_filename(connectpath, &db_name);
+	if (ret != 0) {
+		return ret;
+	}
+	vss_db = db_open(NULL, db_name, 0, TDB_DEFAULT, O_CREAT|O_RDWR, 0644,
+			 DBWRAP_LOCK_ORDER_1, DBWRAP_FLAG_NONE);
+	TALLOC_FREE(db_name);
+	if (vss_db == NULL) {
+		DBG_ERR("vss_db_open: Failed to open/create TDB passwd "
+			"[%s]\n", db_name);
+		return -1;
+	}
+	config->vss.db = vss_db;
+	return 0;
+}
+
+static int shadow_copy_zfs_connect(struct vfs_handle_struct *handle,
+				const char *service, const char *user)
+{
+	struct smblibzfshandle	*libzp;
+	struct shadow_copy_zfs_config *config = NULL;
+	int ret, enumval;
+	const char *backend_str = NULL;
+	const char *tmp_ds = NULL;
+
+	ret = SMB_VFS_NEXT_CONNECT(handle, service, user);
+	if (ret < 0) {
+		return ret;
+	}
+
+	config = talloc_zero(handle->conn, struct shadow_copy_zfs_config);
+	if (config == NULL) {
+		DBG_DEBUG("talloc_zero() failed\n");
+		errno = ENOMEM;
+		return -1;
+	}
+
+	ret = get_smblibzfs_handle(handle->conn, &libzp);
+	if (ret != 0) {
+		DBG_ERR("Failed to get smblibzfs handle\n");
+		errno = ENOMEM;
+		return -1;
+	}
+	config->libzp = libzp;
+
+	enumval = lp_parm_enum(SNUM(handle->conn), "shadow",
+			"cache_backend", cachebackend, SHADOW_MEMCACHE);
+
+	if (enumval == -1) {
+		DBG_ERR("value for [shadow: cache backend] type unknown\n");
+		errno = EINVAL;
+		return -1;
+	}
+
+	config->cache_backend = (enum cachebackend)enumval;
+
+	if (enumval == SHADOW_TDB) {
+		ret = initialize_cache_tdb(config, handle->conn->connectpath);
+		if (ret != 0) {
+			DBG_ERR("Failed to initialize cache tdb\n");
+			return -1;
+		}
+		if (config->vss.db == NULL) {
+			errno = ENOMEM;
+			return -1;
+		}
+	}
+	else {
+		config->vss.mem = memcache_init(handle,
+						(lp_parm_int(SNUM(handle->conn),
+						"shadow", "cache_size", 512) * 1024));
+		if (!config->vss.mem) {
+			errno = ENOMEM;
+			return -1;
+		}
+	}
+
+	smb_zfs_path_to_dataset(config->libzp, handle->conn->connectpath, &tmp_ds);
+
+	config->dataset_path = talloc_strdup(config, tmp_ds);
+
+	if (config->dataset_path == NULL) {
+		DBG_ERR("unable to detect dataset for path %s\n", handle->conn->connectpath);
+		errno = EINVAL;
+		return -1;
+	}
+
+	DBG_INFO("Dataset_Path is %s\n", config->dataset_path);
+
+	config->inclusions = lp_parm_string_list(SNUM(handle->conn), "shadow",
+						"include", empty_list);
+	config->exclusions = lp_parm_string_list(SNUM(handle->conn), "shadow",
+						 "exclude", empty_list);
+
+	config->cache_enabled = lp_parm_bool(SNUM(handle->conn), "shadow",
+						"cache_enabled", true);
+
+	config->ignore_empty_snaps = lp_parm_bool(SNUM(handle->conn), "shadow",
+						"ignore_empty_snaps", true);
+
+	config->timedelta = lp_parm_int(SNUM(handle->conn),
+					"shadow", "snap_timedelta", 300);
+
+
+	SMB_VFS_HANDLE_SET_DATA(handle, config,
+				NULL, struct shadow_copy_zfs_config,
+				return -1);
+
+	return 0;
+}
+
+static struct vfs_fn_pointers vfs_shadow_copy_zfs_fns = {
+	.connect_fn = shadow_copy_zfs_connect,
+	.opendir_fn = shadow_copy_zfs_opendir,
+	.disk_free_fn = shadow_copy_zfs_disk_free,
+	.get_quota_fn = shadow_copy_zfs_get_quota,
+	.rename_fn = shadow_copy_zfs_rename,
+	.link_fn = shadow_copy_zfs_link,
+	.symlink_fn = shadow_copy_zfs_symlink,
+	.stat_fn = shadow_copy_zfs_stat,
+	.lstat_fn = shadow_copy_zfs_lstat,
+	.fstat_fn = shadow_copy_zfs_fstat,
+	.open_fn = shadow_copy_zfs_open,
+	.unlink_fn = shadow_copy_zfs_unlink,
+	.chmod_fn = shadow_copy_zfs_chmod,
+	.chown_fn = shadow_copy_zfs_chown,
+	.chdir_fn = shadow_copy_zfs_chdir,
+	.ntimes_fn = shadow_copy_zfs_ntimes,
+	.readlink_fn = shadow_copy_zfs_readlink,
+	.mknod_fn = shadow_copy_zfs_mknod,
+	.realpath_fn = shadow_copy_zfs_realpath,
+	.get_nt_acl_fn = shadow_copy_zfs_get_nt_acl,
+	.fget_nt_acl_fn = shadow_copy_zfs_fget_nt_acl,
+	.get_shadow_copy_data_fn = shadow_copy_zfs_get_shadow_copy_zfs_data,
+	.mkdir_fn = shadow_copy_zfs_mkdir,
+	.rmdir_fn = shadow_copy_zfs_rmdir,
+	.getxattr_fn = shadow_copy_zfs_getxattr,
+	.listxattr_fn = shadow_copy_zfs_listxattr,
+	.removexattr_fn = shadow_copy_zfs_removexattr,
+	.setxattr_fn = shadow_copy_zfs_setxattr,
+	.chflags_fn = shadow_copy_zfs_chflags,
+	.get_real_filename_fn = shadow_copy_zfs_get_real_filename,
+	.connectpath_fn = shadow_copy_zfs_connectpath,
+};
+
+NTSTATUS vfs_shadow_copy_zfs_init(TALLOC_CTX *);
+NTSTATUS vfs_shadow_copy_zfs_init(TALLOC_CTX *ctx)
+{
+	NTSTATUS ret =  smb_register_vfs(SMB_VFS_INTERFACE_VERSION,
+					 "shadow_copy_zfs", &vfs_shadow_copy_zfs_fns);
+	if (!NT_STATUS_IS_OK(ret))
+		return ret;
+
+	vfs_shadow_copy_zfs_debug_level = debug_add_class("shadowzfs");
+	if (vfs_shadow_copy_zfs_debug_level == -1) {
+		vfs_shadow_copy_zfs_debug_level = DBGC_VFS;
+		DBG_ERR("vfs_shadow_copy_zfs: Couldn't register custom debugging class!\n");
+	} else {
+		DBG_DEBUG("vfs_shadow_copy_zfs: Debug class number of 'shadowzfs': %d\n",
+			  vfs_shadow_copy_zfs_debug_level);
+	}
+
+	return ret;
+}
diff --git a/source3/modules/vfs_tmprotect.c b/source3/modules/vfs_tmprotect.c
new file mode 100644
index 00000000000..0d8f95f2401
--- /dev/null
+++ b/source3/modules/vfs_tmprotect.c
@@ -0,0 +1,283 @@
+/* tmprotect: a module for automatic ZFS snapshot maintenance.
+ *
+ * Copyright (C) iXsystems Inc     2019
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#include "includes.h"
+#include "system/filesys.h"
+#include "lib/util/tevent_ntstatus.h"
+
+#include "modules/smb_libzfs.h"
+
+#define TMPROTECT_PREFIX "aapltm"
+#define TMPROTECT_MODULE "tmprotect"
+
+static const char *null_string = NULL;
+static const char **empty_list = &null_string;
+static const char *default_aapl = "aapltm-*";
+static const char **default_prefix = &default_aapl;
+
+enum autorollback {A_ALWAYS, A_POWERLOSS, A_DISABLED};
+
+struct tmprotect_config_data {
+	struct smblibzfshandle *libzp;
+	const char **inclusions;
+	const char **exclusions;
+	const char *connectpath;
+	enum autorollback autorollback;
+	time_t last_snap;
+	time_t oldest_snap;
+};
+
+static const struct enum_list autorollback[] = {
+	{A_ALWAYS, "always"},
+	{A_POWERLOSS, "powerloss"},
+	{A_DISABLED, "never"},
+	{ -1, NULL}
+};
+
+static void tmprotect_free_data(void **pptr) {
+	/*
+	 * Remove dataset flag in destructor function of VFS handle.
+	 * This ensures will get triggered in case of session ending
+	 * but will not be triggered in case of power loss event or
+	 * application crash. The idea here is that if this function
+	 * isn't called for an smb session, then the data is more
+	 * likely to be questionable. 
+	 */
+	struct tmprotect_config_data *config = NULL;
+
+	config = talloc_get_type_abort(*pptr, struct tmprotect_config_data);
+	if (config == NULL) {
+		DBG_ERR("Unable to retrieve config information from handle\n");
+		return;
+	}
+	if (config->autorollback != A_DISABLED) {
+		smb_zfs_set_user_prop(config->libzp, config->connectpath,
+				      "tm_in_progress", "false");
+	}
+}
+
+
+static void tmprotect_disconnect(vfs_handle_struct *handle)
+{
+	int ret;
+	time_t curtime;
+	struct tmprotect_config_data *config = NULL;
+	char *snapshot_name = NULL;
+	time(&curtime);
+	SMB_VFS_HANDLE_GET_DATA(handle,
+				config,
+				struct tmprotect_config_data,
+				NULL);
+
+	/*
+	 * Time machine will back up once every 15 minutes by default.
+	 * Refuse to take more frequent snapshots than that.
+	 */
+	if ((config->last_snap + 900) > curtime) {
+		DBG_INFO("Refusing to generate new snapshot on disconnect"
+			 "last snapshot is less than 15 minutes old\n");
+		return;
+	}
+	snapshot_name = talloc_asprintf(talloc_tos(), "%s-%lu",
+					TMPROTECT_PREFIX,
+					curtime);
+
+	ret = smb_zfs_snapshot(config->libzp,
+			       handle->conn->connectpath,
+			       snapshot_name,
+			       false);
+	if (ret != 0) {
+		DBG_ERR("Failed to generate closing snapshot on path: %s\n",
+			handle->conn->connectpath);
+	}
+}
+
+static int tmprotect_connect(struct vfs_handle_struct *handle,
+			     const char *service, const char *user)
+{
+	int ret, retention, min_snaps, enumval;
+	size_t remaining_snaps;
+	struct tmprotect_config_data *config = NULL;
+	struct smblibzfshandle *libzp = NULL;
+	struct snapshot_list *snapshots = NULL;
+	struct snapshot_list *to_delete = NULL;
+	struct snapshot_entry *entry = NULL;
+	struct snapshot_entry *del_entry = NULL;
+	time_t curtime;
+	double seconds = 0.0;
+	ret = retention = min_snaps = 0;
+	char *backup_interrupted = NULL;
+
+	config = talloc_zero(handle->conn, struct tmprotect_config_data);
+	if (!config) {
+		DBG_ERR("talloc_zero() failed\n");
+		errno = ENOMEM;
+		return -1;
+	}
+	to_delete = talloc_zero(handle->conn, struct snapshot_list);
+
+	ret = get_smblibzfs_handle(handle->conn, &libzp);
+	if (ret != 0) {
+		DBG_ERR("Failed to get smblibzfs handle\n");
+		errno = ENOMEM;
+		return -1;
+	}
+	config->libzp = libzp;
+
+	/*
+	 * Copy the connectpath to the config so that it's guaranteed
+	 * to be available in the config destructor. It must be
+	 * available so that we can unset the custom dataset property
+	 * indicating that a backup is in progress.
+	 */
+	config->connectpath = talloc_strdup(config, handle->conn->connectpath);
+
+	config->inclusions = lp_parm_string_list(SNUM(handle->conn),
+						 TMPROTECT_MODULE,
+						 "include", default_prefix);
+
+	config->exclusions = lp_parm_string_list(SNUM(handle->conn),
+						 TMPROTECT_MODULE,
+						 "exclude", empty_list);
+
+
+	enumval = lp_parm_enum(SNUM(handle->conn), TMPROTECT_MODULE, 
+			       "auto_rollback", autorollback, A_DISABLED);
+
+	if (enumval == -1) {
+		DBG_ERR("value for [tmprotect: auto_rollback] type unknown\n");
+		errno = EINVAL;
+		return -1;
+	}
+
+	config->autorollback = (enum autorollback)enumval;
+
+
+	retention = lp_parm_int(SNUM(handle->conn),
+				TMPROTECT_MODULE,
+				"retention", 7);
+
+	min_snaps = lp_parm_int(SNUM(handle->conn),
+				TMPROTECT_MODULE,
+				"min_snaps", 24);
+
+	retention *= 86400; //convert from days to seconds 
+
+	time(&curtime);
+
+	/*
+	 * Iterate through list of snapshots with the tmprotect 
+	 * prefixand check for ones that we need to remove,
+	 * and add them to the to_delete list.
+	 */
+	snapshots = smb_zfs_list_snapshots(config->libzp,
+					   talloc_tos(),
+					   handle->conn->connectpath,
+					   false,
+					   config->inclusions,
+					   config->exclusions,
+					   0, 0);
+
+	for (entry = snapshots->entries; entry; entry = entry->next) {
+		if ((config->last_snap == 0) || 
+		    (entry->cr_time > config->last_snap)) {
+			config->last_snap = entry->cr_time;
+		}
+		seconds = difftime(curtime, entry->cr_time);
+		if (((config->oldest_snap == 0) ||
+		    (entry->cr_time < config->oldest_snap)) &&
+		    (seconds < retention)) {
+			config->oldest_snap = entry->cr_time;
+		}
+		if (seconds > retention) {
+			DBG_INFO("Appending [%s] to list of snapshots "
+				 "to be deleted.\n", entry->name);
+			del_entry = talloc_zero(talloc_tos(), struct snapshot_entry);
+			del_entry->name = talloc_strdup(talloc_tos(), entry->name);
+			DLIST_ADD(to_delete->entries, del_entry);
+			to_delete->num_entries++;
+		}
+	}
+	remaining_snaps = snapshots->num_entries - to_delete->num_entries;
+	/*
+	 * We need to ensure that we keep at least min_snaps, and that at least one
+	 * of those snaps is somewhat old. Otherwise, refuse to delete. This is to
+	 * address potential issue of login storm causing min_snaps to suddenly increase
+	 * and trigger a pruning of useful history. It's better to err on the side of
+	 * having too many snapshots. 
+	 */
+	if (remaining_snaps > min_snaps || (config->oldest_snap > (curtime-(retention/2)))) {
+		DBG_DEBUG("num_snaps: %d, num_delete: %d, remaining_snaps: %d, "
+			  "min snaps: %d\n", snapshots->num_entries,
+			  to_delete->num_entries, remaining_snaps, min_snaps);
+		to_delete->dataset_name = talloc_strdup(talloc_tos(), snapshots->dataset_name);
+		ret = smb_zfs_delete_snapshots(config->libzp,
+					       talloc_tos(),
+					       to_delete);
+		if (ret != 0) {
+			DBG_ERR("failed to delete list of expired snapshots\n");
+		}
+	}
+	else {
+		DBG_INFO("Refusing to delete stale snapshots because "
+			 "the remaining number of snapshots would "
+			 "be less than the value specified in "
+			 "tmprotect:min_snaps [%d]\n", min_snaps);
+	}
+	TALLOC_FREE(to_delete);
+
+	switch (config->autorollback){
+	case A_ALWAYS:
+		smb_zfs_rollback_last(config->libzp, handle->conn->connectpath);	
+		break;
+	case A_POWERLOSS:
+		ret = smb_zfs_get_user_prop(config->libzp,
+					    talloc_tos(),
+					    handle->conn->connectpath,
+					    "tm_in_progress",
+					    &backup_interrupted);
+		if ((ret == 0) && (strcmp(backup_interrupted, "true") == 0)) {
+			smb_zfs_rollback_last(config->libzp,
+					      handle->conn->connectpath);	
+		} 
+		break;
+	default:
+		break;
+	}
+	if (config->autorollback != A_DISABLED) {
+		smb_zfs_set_user_prop(config->libzp, handle->conn->connectpath,
+				      "tm_in_progress", "true");
+	}
+	SMB_VFS_HANDLE_SET_DATA(handle, config,
+				tmprotect_free_data, struct tmprotect_config_data,
+				return -1);
+
+	return SMB_VFS_NEXT_CONNECT(handle, service, user);
+}
+
+static struct vfs_fn_pointers tmprotect_fns = {
+	.disconnect_fn = tmprotect_disconnect,
+	.connect_fn = tmprotect_connect
+};
+
+NTSTATUS vfs_tmprotect_init(TALLOC_CTX *);
+NTSTATUS vfs_tmprotect_init(TALLOC_CTX *ctx)
+{
+	return smb_register_vfs(SMB_VFS_INTERFACE_VERSION, "tmprotect", &tmprotect_fns);
+}
diff --git a/source3/modules/vfs_zfs_fsrvp.c b/source3/modules/vfs_zfs_fsrvp.c
new file mode 100644
index 00000000000..ecde1225bef
--- /dev/null
+++ b/source3/modules/vfs_zfs_fsrvp.c
@@ -0,0 +1,233 @@
+/* zfs_fsrvp: a module implementing FSS using ZFS 
+ *
+ * Copyright (C) iXsystems Inc     2019
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#include "includes.h"
+#include "system/filesys.h"
+#include "modules/smb_libzfs.h"
+
+#define ZFS_FSRVP_PREFIX "fss"
+#define ZFS_FSRVP_MODULE "zfs_fsrvp"
+#define ZFS_FSRVP_SNAPLEN 17 
+
+struct zfs_fsrvp_config_data {
+	struct smblibzfshandle *libzp;
+	char *dataset_name;
+};
+
+
+/*
+ * Check whether a path can be shadow copied. Return the base ZFS dataset, allowing
+ * the caller to determine if multiple paths lie on the same ZFS dataset.
+ */
+static NTSTATUS zfs_fsrvp_check_path(struct vfs_handle_struct *handle,
+				     TALLOC_CTX *mem_ctx,
+				     const char *service_path,
+				     char **base_volume)
+{
+	struct zfs_fsrvp_config_data *config = NULL;
+	SMB_VFS_HANDLE_GET_DATA(handle,
+				config,
+				struct zfs_fsrvp_config_data,
+				return NT_STATUS_NO_MEMORY);
+
+	*base_volume = talloc_strdup(mem_ctx, config->dataset_name);
+	return NT_STATUS_OK;
+}
+
+static NTSTATUS zfs_fsrvp_snap_create(struct vfs_handle_struct *handle,
+				      TALLOC_CTX *mem_ctx,
+				      const char *base_volume,
+				      time_t *tstamp,
+				      bool rw,
+				      char **base_path,
+				      char **snap_path)
+{
+	/*
+	 * Snap_path must be set to the full path inside the
+	 * correct .zfs/snapshot directory. This path is used
+	 * when generating the dynamic shares for FSS. 
+	 *
+	 * base_path is set to the ZFS dataset underlying
+	 * the original service path.
+	 */
+
+	int ret;
+	struct timespec ts;
+	struct zfs_fsrvp_config_data *config = NULL;
+	char snap_name[ZFS_FSRVP_SNAPLEN] = { 0 };
+
+	SMB_VFS_HANDLE_GET_DATA(handle,
+				config,
+				struct zfs_fsrvp_config_data,
+				return NT_STATUS_NO_MEMORY);
+
+	/*
+	 * Snapshots take the format: "fss-<timestamp>".
+	 * try to keep the snapshot name as short as possible
+	 * while avoiding collisions with other snapshots.
+	 * Since these may also be managed from the commandline
+	 * "zfs" application, a timestamp is somewhat useful to present. 
+	 * FreeBSD prior to 12.0 is limited to 80 characters for the
+	 * length of mountpoint names, and so shorter is better here.
+	 */
+	ts = timespec_current();
+	snprintf(snap_name, sizeof(snap_name), "%s-%ld%ld",
+		 ZFS_FSRVP_PREFIX, ts.tv_sec, ts.tv_nsec);
+
+	ret = smb_zfs_snapshot(config->libzp, handle->conn->connectpath,
+			       snap_name, false);
+	if (ret != 0) {
+		return map_nt_error_from_unix(errno);
+	}
+	*snap_path = talloc_asprintf(mem_ctx, "%s/.zfs/snapshot/%s",
+				     handle->conn->connectpath, snap_name);
+	*base_path = talloc_strdup(mem_ctx, base_volume); 
+	return NT_STATUS_OK;
+}
+
+static NTSTATUS zfs_fsrvp_snap_delete(struct vfs_handle_struct *handle,
+				      TALLOC_CTX *mem_ctx,
+				      char *base_path,
+				      char *snap_path)
+{
+	int ret;
+	struct zfs_fsrvp_config_data *config = NULL;
+	TALLOC_CTX *tmp_ctx;
+	struct snapshot_list *to_delete = NULL;
+	struct snapshot_entry *del_entry = NULL;
+	char *parent = NULL;
+	size_t rlen, slen;
+	const char *base;
+
+	SMB_VFS_HANDLE_GET_DATA(handle,
+				config,
+				struct zfs_fsrvp_config_data,
+				return NT_STATUS_NO_MEMORY);
+
+	tmp_ctx = talloc_new(mem_ctx);
+
+	/* The last component of the snapshot mp is the name of the ZFS snapshot */ 
+	if (!parent_dirname(tmp_ctx, snap_path, &parent, &base)) {
+		TALLOC_FREE(tmp_ctx);
+		return NT_STATUS_NO_MEMORY;
+	}
+
+	to_delete = talloc_zero(tmp_ctx, struct snapshot_list);
+	del_entry = talloc_zero(tmp_ctx, struct snapshot_entry);
+
+	to_delete->dataset_name = talloc_strdup(tmp_ctx, base_path);
+	to_delete->num_entries = 1;
+	del_entry->name = talloc_strdup(tmp_ctx, base);
+	DLIST_ADD(to_delete->entries, del_entry);
+
+	ret = smb_zfs_delete_snapshots(config->libzp,
+				       tmp_ctx,
+				       to_delete);
+	if (ret != 0) {
+		TALLOC_FREE(tmp_ctx);
+		DBG_ERR("Failed to delete snapshots: %s\n",
+			strerror(errno));
+		return NT_STATUS_NO_MEMORY;
+	}
+	TALLOC_FREE(tmp_ctx);
+	return NT_STATUS_OK;
+}
+
+static int zfs_fsrvp_connect(struct vfs_handle_struct *handle,
+			     const char *service, const char *user)
+{
+	int ret;
+	struct zfs_fsrvp_config_data *config = NULL;
+	struct smblibzfshandle *libzp = NULL;
+	char *dataset_name = NULL;
+	char *dataset_mp = NULL;
+
+	config = talloc_zero(handle->conn, struct zfs_fsrvp_config_data);
+	if (!config) {
+		DBG_ERR("talloc_zero() failed\n");
+		errno = ENOMEM;
+		return -1;
+	}
+
+	ret = get_smblibzfs_handle(handle->conn, &libzp);
+	if (ret != 0) {
+		DBG_ERR("Failed to get smblibzfs handle on path [%s]\n",
+			handle->conn->connectpath);
+		errno = ENOMEM;
+		return -1;
+	}
+	config->libzp = libzp;
+
+	ret = smb_zfs_path_to_dataset(config->libzp,
+				      handle->conn->connectpath,
+				      &dataset_name); 
+	if (ret != 0) {
+		DBG_ERR("Failed to get dataset name.\n");
+		if (strstr(handle->conn->connectpath, ".zfs/snapshot") == NULL) {
+			DBG_ERR("Connectpath is not in [.zfs/snapshot] and libzfs "
+				"was unable to obtain zfs handle. Closing conn.\n");
+			errno = ENOMEM;
+			return -1;
+		}
+		TALLOC_FREE(config);
+		return SMB_VFS_NEXT_CONNECT(handle, service, user);
+	}
+	config->dataset_name = talloc_strdup(handle->conn, dataset_name);
+	ret = smb_zfs_dataset_name_to_mp(config->libzp,
+					 handle->conn,
+					 config->dataset_name,
+					 &dataset_mp);
+	if (ret != 0) {
+		errno = ENOMEM;
+		return -1;
+	}
+
+	/*
+	 * In majority of observed deployments, users are sharing the
+	 * dataset mountpoints and not directories inside the dataset.
+	 * For now, it seems to be a suitable compromise in terms of
+	 * code simplicity and security to have this limitation in the 
+	 * module.
+	 */
+	if (strcmp(dataset_mp, handle->conn->connectpath) != 0) {
+		DBG_ERR("Sharing a subdirectory inside a ZFS dataset "
+			"is not permitted.");
+		errno = EPERM;
+		return -1;
+	}
+	SMB_VFS_HANDLE_SET_DATA(handle, config,
+				NULL, struct zfs_fsrvp_config_data,
+				return -1);
+
+	return SMB_VFS_NEXT_CONNECT(handle, service, user);
+}
+
+static struct vfs_fn_pointers zfs_fsrvp_fns = {
+	.snap_check_path_fn = zfs_fsrvp_check_path,
+	.snap_create_fn = zfs_fsrvp_snap_create,
+	.snap_delete_fn = zfs_fsrvp_snap_delete,
+	.connect_fn = zfs_fsrvp_connect
+};
+
+NTSTATUS vfs_zfs_fsrvp_init(TALLOC_CTX *);
+NTSTATUS vfs_zfs_fsrvp_init(TALLOC_CTX *ctx)
+{
+	return smb_register_vfs(SMB_VFS_INTERFACE_VERSION,
+			        "zfs_fsrvp", &zfs_fsrvp_fns);
+}
